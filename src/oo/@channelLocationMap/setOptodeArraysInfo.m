function obj=setOptodeArraysInfo(obj,idx,oaInfo)
%CHANNELLOCATIONMAP/SETOPTODEARRAYSINFO Set the information associated to the optode arrays
%
% obj=setOptodeArraysInfo(obj,idx,oaInfo) Updates the information
%   associated to one or more optode arrays.
%   Indexes lower than 0 will be ignored. Indexes above the current
%   number of optode arrays can be used for setting the information
%   of yet unused optode arrays.
%
% obj=setOptodeArraysInfo(obj,idx,[]) Reset the information
%   associated to one or more optode arrays to the default values.
%   Indexes lower than 0 will be ignored. Indexes above the current
%   number of optode arrays can be used for resetting the information
%   of yet unused optode arrays.
%
% Please refer to clearOptodeArraysInfo for eliminating optode
%arrays information records.
%
% Please refer to method setOptodeArrays for updating the optode arrays
%associated with any channel.
%
%% Parameters
%
% idx - A vector of indexes to optode arrays.
%
% oaInfo - A nx1 struct of optode arrays information records where n is the
%       length of idx. Each optode array information record contains the
%       following fields:
%           .mode - A string coding the optode array channel arrangement.
%               Valid modes depend on the neuroimage type. Each neuroimage
%               subclass should check the validity of the modes.
%           .type - A string describing whether the optode array is for
%               adults, infants or neonates.
%           .topoArrangement - Topographical arrangement of the channels
%               within the optode array. These are 3D coordinates which
%               locate the channels internally to the optode array. The
%               coordinates in this property are assigned to the channels
%               associated to this optode array in order from the lowest
%               channel number (i.e. 1) to the highest. A default
%               arrangement positions the channels along a straight line.
%               The number of locations in this topographical arrangement
%               may not match the number of associated channels. When
%               associating new channels, if the number of associated
%               channels surpasses the number of defined topographical
%               locations, these latter will be automatically be
%               generated by default (set along a line over the X axis).
%               When the number of associated channels drop below the
%               number of defined topographical locations, the remaining
%               topographical locations will simply be ignored. However,
%               beware that they will not be removed, and will remain
%               latent and will be used again if ever new channels are
%               associated to the optode array.
%
%
%
%
% Copyright 2012-13
% @date: 22-Dec-2012
% @author: Felipe Orihuela-Espina
% @modified: 12-Oct-2013
%
% See also getOptodeArraysInfo, clearOptodeArraysInfo,
%

%% Log
%
% 12-Oct-2013: Minor bug fixed. Error message was displaying the wrong
%       index of the optode array info.
%       Bug fixed. Default assigment of channel and optode topographical
%       arrangements when there were no channels or optodes respectively
%       was improper.
%
% 8-Sep-2013: Support for topological arrangement of optodes. Updated
%       "links" of the See also section
%


if isempty(oaInfo)
    %Reset the information for the selected optode arrays
    idx(idx<1)=[];
    for oa=idx
        obj.optodeArrays(oa).mode='';
        obj.optodeArrays(oa).type='';
        %get the number of associated channels
        nAssocChannels = length(find(obj.chOptodeArrays==oa));
        obj.optodeArrays(oa).chTopoArrangement=zeros(nAssocChannels,3);
        %...and arrange them in line
        obj.optodeArrays(oa).chTopoArrangement(:,1)=1:nAssocChannels;
        obj.optodeArrays(oa).optodesTopoArrangement=zeros(nAssocChannels,2);
        %...and arrange them in line (interspersed with channel locations)
        obj.optodeArrays(oa).optodesTopoArrangement(:,1)=(1:nAssocChannels)-0.5;
    end
            
else
    
assert(numel(idx)==numel(oaInfo),...
        ['ICNA:channelLocationMap:setOptodeArraysInfo:InvalidParameterValue',...
         ' Number of optode arrays indexes mismatches number of ' ...
         'associated optode arrays information records.']);
idx=reshape(idx,numel(idx),1); %Ensure both are vectors
oaInfo=reshape(oaInfo,numel(oaInfo),1);

tempIdx=find(idx<1);
idx(tempIdx)=[];
oaInfo(tempIdx)=[];

%Check the struct fields and for each field its info
nElem=length(oaInfo);
for ee=1:nElem
    names = fieldnames(oaInfo);
    nFields = length(names);
    for ff=1:nFields
        switch (names{ff})
            case 'mode'
                val=oaInfo(ee).mode;
                if isempty(val)
                    oaInfo(ee).mode = ''; %Switch for an empty string
                elseif ischar(val)
                    %Valid; do nothing
                    %NOTE: Valid modes depend on the neuroimage type.
                    %This ought to be checked in each neuroimage subclass
                    %independently.
                else 
                  error('ICNA:channelLocationMap:setOptodeArraysInfo:InvalidFieldValue',...
                      ['Mode in ' num2str(ee) ...
                       '-th optode array information record must be a string.']);
                end
                
            case 'type'
                val=oaInfo(ee).type;
                if isempty(val)
                    oaInfo(ee).type = ''; %Switch for an empty string
                elseif ischar(val)
                    %Valid; do nothing
                    %NOTE: Valid type depend on the neuroimage type.
                    %This ought to be checked in each neuroimage subclass
                    %independently.
                else 
                  error('ICNA:channelLocationMap:setOptodeArraysInfo:InvalidFieldValue',...
                      ['Type in ' num2str(ee) ...
                       '-th optode array information record must be a string.']);
                end
                
            case 'chTopoArrangement'
                val=oaInfo(ee).chTopoArrangement;
                if isempty(val)
                    %get the number of associated channels
                    nAssocChannels = length(find(obj.chOptodeArrays==idx(ee)));
                    oaInfo(ee).chTopoArrangement = zeros(nAssocChannels,3);
                        %Switch for an empty matrix
                    %...and arrange them in line
                    if nAssocChannels~=0
                        oaInfo(ee).chTopoArrangement(:,1)=1:nAssocChannels;
                    end
                elseif (~ischar(val) && ~iscell(val) && ~isstruct(val))
                    %Is a matrix; Valid but may need adjustments
                    %Check dimensions
                    [nRows,nCols]=size(val);
                    %Adjust columns
                    if (nCols < 3)
                        val(:,end+1:3)=0;
                    elseif (nCols > 3)
                        val(:,4:end)=[];
                    end
                    %Adjust rows
                    %get the number of associated channels
                    nAssocChannels = length(find(obj.chOptodeArrays==idx(ee)));
                    if (nRows < nAssocChannels)
                        val(end+1:nAssocChannels,:)=0;
                        val(nRows+1:nAssocChannels,1)=nRows+1:nAssocChannels;
                            %Arrange the new locations in a line
                    end
                    oaInfo(ee).chTopoArrangement = val;
                                        
                else 
                  error('ICNA:channelLocationMap:setOptodeArraysInfo:InvalidFieldValue',...
                      ['Topographical arrangement of channels in ' num2str(ee) ...
                       '-th optode array information record must be ' ...
                       'a matrix of 3D locations.']);
                end

            case 'optodesTopoArrangement'
                val=oaInfo(ee).optodesTopoArrangement;
                if isempty(val)
                    %get the number of associated channels
                    nAssocOptodes = length(find(obj.optodesOptodeArrays==idx(ee)));
                    oaInfo(ee).optodesTopoArrangement = zeros(nAssocOptodes,2);
                        %Switch for an empty matrix
                    %...and arrange them in line (interspersed with
                    %channels)
                    if nAssocOptodes~=0
                        oaInfo(ee).chTopoArrangement(:,1)=(1:nAssocOptodes)-0.5;
                    end
                elseif (~ischar(val) && ~iscell(val) && ~isstruct(val))
                    %Is a matrix; Valid but may need adjustments
                    %Check dimensions
                    [nRows,nCols]=size(val);
                    %Adjust columns
                    if (nCols < 3)
                        val(:,end+1:3)=0;
                    elseif (nCols > 3)
                        val(:,4:end)=[];
                    end
                    %Adjust rows
                    %get the number of associated optodes
                    nAssocOptodes = length(find(obj.optodesOptodeArrays==idx(ee)));
                    if (nRows < nAssocOptodes)
                        val(end+1:nAssocOptodes,:)=0;
                        val(nRows+1:nAssocOptodes,1)=nRows+(1:nAssocOptodes)-0.5;
                            %Arrange the new locations in a line
                    end
                    oaInfo(ee).optodesTopoArrangement = val;
                                        
                else 
                  error('ICNA:channelLocationMap:setOptodeArraysInfo:InvalidFieldValue',...
                      ['Topographical arrangement of optodes in ' num2str(ee) ...
                       '-th optode array information record must be ' ...
                       'a matrix of 3D locations.']);
                end

            otherwise
                error('ICNA:channelLocationMap:setOptodeArraysInfo:InvalidField',...
                      ['Invalid field ' names{ff} ' in ' num2str(ee)...
                       '-th optode array information record.']);
        end
    end
end

%Finally set the optode arrays info
if isempty(obj.optodeArrays)
    oaInfo = orderfields(oaInfo, struct('mode',{},'type',{},...
                                        'chTopoArrangement',{},...
                                        'optodesTopoArrangement',{}));
        %Note that this line should actually do the work as well
        %in case obj.optodeArrays is not empty, so the if won't be
        %strictly unnecessary. However, I have preferred to leave the
        %if for code clarity.
else
    oaInfo = orderfields(oaInfo, obj.optodeArrays(idx));
end
%Orders the fields in oaInfo so that fields are in the same order
%as those in obj.optodeArrays. If this field sorting is not done
%then the assignment below will result in error:
%       "Subscripted assignment between dissimilar structures."
%Structures oaInfo and obj.optodeArrays must have the same fields.
obj.optodeArrays(idx)=oaInfo;

end
assertInvariants(obj);

