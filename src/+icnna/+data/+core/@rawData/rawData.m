classdef rawData
% icnna.data.core.rawData Data in propietary format
% 
% This class supersedes class |rawData|.
% 
%A icnna.data.core.rawData represents the data available in propietary
%format. 
% 
% icnna.data.core.rawData may have been generated by any kind of sensing
%device (neuroimaging device, tracker, physiological meter or other).
%
% Due to the variability of the sources, the external formats may be
%very different. This class is an extremely simple abstract class to 
%accomodate all the possible raw data under a common roof.
%
%
%% Differences to original class |rawData|
% In contrast to original class |rawData|, this class does NOT
%assume that the data is un-processed.
%
%   * The convert abstract method is no longer available. Instead,
%   alternative polymorphic methods (icnna.op.*) are available.
%   * rawData no longer is assumed to start on a file e.g. as import
%   abstract method did. Instead, folders containing data will also
%   be readily acceptable as rawData. Right now, this is more like a
%   NIRx session folder where there are several files, rather than a
%   BIDS structure. BIDS structure will have its own full support.
%   * Abstract method import no longer requires a parameter for the
%   location of the data and instead now relies on new property .path.
%
%       + BEFORE: myRawData.import(filename,...);
%       + NOW EITHER: myRawData.path = filename;
%                     myRawData.import(...);
%       + OR: myRawData.import(path,...); %This format *ought* to modify
%                                         %the property |.path| as well as
%                                         %the property |.dataFiles| 
%
%   * Multi modal data (if considered a single conceptual data stream)
%   is permitted. Separated modality support may also be provided for
%   each substream.
% 
% Hence, the implementing classes must still know how to read the external
%format (method import) but no longer needs to know how to convert the
%information to a more standard class such as |structuredData| or
%|iccna.data.snirf.snirf|.
%
%% Remarks
%
%   This is an Abstract class.
%
%   Watch out! The |.path| may be modified AFTER calling method |import|
% but no consistency check is made. In other words, although it is expected
% that the |.path| corresponds to the imported data but there is no
% guarantee. Same with |.date|.
%
%
%% Known subclasses
%
% icnna.data.misc.rawData_NIRx - fNIRS measurement data in NIRx propietary
%       format.
%
%
%% Properties
%
%   .classVersion - (Read only) The class version of the object
%   .id - Int. A numerical identifier.
%   .description - Char array. A short description. The default value is
%       'RawData0001'
%   .path - Char array. The file or folder from where the original data was read.
%       It may or may not contain the filename (see property .fileContents).
%       The default value is ['.' filesep]
%       * Available since class version 1.0.
%   .date - Datetime. A datetime associated with the acquisition of the
%       icnna.data.core.rawData. The default value is datetime('now').
%   .dataFiles - Dictionary (String -> Cell)
%       The list of files read (keys) and their contents (values).
%  
%% Methods
%
% Type methods('rawData') for a list of methods
%
%
% Copyright 2025
% @author: Felipe Orihuela-Espina
%
% See also rawData
%




%% Log of old class |rawData| before the creation of this class.
%
% File created: 12-May-2008
% File last modified (before creation of this log): 4-Apr-2018
%
% 4-Apr-2018 (FOE): Added known subclasses.
%
%
% 13-May-2023: FOE
%   + Got rid of old labels @date and @modified.
%   + Added property classVersion. Set to '1.0' by default.
%   + Added get/set methods support for struct like access to attributes.
%   + For those attributes above also started to simplify the set
%   code replacing it with validation rules on the declaration.
%   + Improved some comments.
%

%% Log
%
%   + Class available since ICNNA v1.2.3
%
% 2-Feb-2025: FOE
%   + File and class created. Part of the code is inherited from
%   old class |rawData| (dating back to 2008 - See above).
%   + Property .date is now of type datetime.
%   + Property .path added.
%   + Property .dataFiles added.
%
%

    properties (Constant, Access=private)
        classVersion = '1.0'; %Read-only. Object's class version.
    end



    properties %(SetAccess=private, GetAccess=private)
        id(1,1) double {mustBeInteger, mustBeNonnegative} = 1; %Numerical identifier to make the object identifiable.
        description(1,:) char = 'RawData0001'; %A short description of the data.
        path(1,:) char = ['.' filesep]; %The folder or filename from where the original data was read.
        date=datetime('now'); %Acquisition date as character vector.
        dataFiles(1,1) dictionary = configureDictionary("string","cell"); %A key(string)-value(Cell(1,1)) pair per each file read where the key is the filename and the value is the content.
    end
 
    methods    
        function obj=rawData(varargin)
            %ICNNA.DATA.CORE.RAWDATA RawData class constructor
            %
            % obj=icnna.data.core.rawData() creates a default rawData with ID equals 1.
            %
            % obj=icnna.data.core.rawData(obj2) acts as a copy constructor of rawData
            %
            % obj=icnna.data.core.rawData(id) creates a new rawData with the given
            %   identifier (id). The name of the rawData is initialised
            %   to 'RawDataXXXX' where is the id preceded with 0.
            %

            if (nargin==0)
                %Keep default values
            elseif isa(varargin{1},'icnna.data.core.rawData')
                obj=varargin{1};
                return;
            else
                obj.id=varargin{1};
                obj.description=['RawData' num2str(obj.id,'%04i')];
            end
            %assertInvariants(obj);

        end
   
    end

    methods (Abstract=true)
        obj=import(obj,varargin);
        %Reads the |.path| storing the raw data
    end



    methods

      %Getters/Setters

      function res = get.id(obj)
         %Gets the object |id|
         res = obj.id;
      end
      function obj = set.id(obj,val)
         %Sets the object |id|
         obj.id = val;
      end


      function res = get.description(obj)
         %Gets the object |description|
         res = obj.description;
      end
      function obj = set.description(obj,val)
         %Sets the object |description|
         obj.description = val;
      end


      function res = get.path(obj)
         %Gets the object |path|
         res = obj.path;
      end
      function obj = set.path(obj,val)
         %Sets the object |path|
         %Update the folder separators
         idx = find(val == '\' | val == '/');
         val(idx) = filesep;
         obj.path = val;
      end


      function res = get.date(obj)
         %Gets the object |date|
         res = obj.date;
      end
      function obj = set.date(obj,val)
         %Sets the object |date|
         obj.date = val;
      end

      function res = get.dataFiles(obj)
         %Gets the object's |dataFiles|
         res = obj.dataFiles;
      end
      function obj = set.dataFiles(obj,val)
         %Sets the object's |dataFiles|
         %Ensure the key and value types
         [keyType,valueType] = types(val);
         if strcmp(keyType,'string') && strcmp(valueType,'cell')
             obj.dataFiles = val;
         else
             error('ICNNA:icnna.data.misc.rawData_NIRx:set:InvalidParameterValue',...
                 'Value must be a dictionary (string ‚üº cell).');            
         end
      end

    end

end
