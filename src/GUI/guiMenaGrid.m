function [theGrid]=guiMenaGrid(element)
%GUI for generating or updating a Grid object
%
% [theGrid]=guiMenaGrid(element) Generates or updates a Grid object
%
%
% Copyright 2008
% @date: 22-Sep-2008
% @author Felipe Orihuela-Espina
%
% See also guiAnalysis, analysis, menaGrid
%


%% Initialize the figure
%...and hide the GUI as it is being constructed
width=600;
height=420;
f=figure('Visible','off','Position',[100,300,width,height]);
set(f,'NumberTitle','off');
set(f,'MenuBar','none'); %Hide MATLAB figure menu
%set(f,'CloseRequestFcn',{@OnClose_Callback});
movegui(f,'center');

fontSize=16;
bgColor=get(f,'Color');
uicontrol(f,'Style', 'text',...
       'String', 'ID:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.9 0.2 0.06]);
uicontrol(f,'Style', 'edit',...
       'Tag','idEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.22 0.9 0.1 0.06]);
uicontrol(f,'Style', 'text',...
       'String', 'Type:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.32 0.9 0.2 0.06]);
uicontrol(f,'Style', 'popupmenu',...
       'Tag','typeCombo',...
       'String', {'Logarithmic Radial'},...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Callback',{@OnUpdateElement_Callback},...
       'Position', [0.52 0.9 0.4 0.06]);

   
   
   

tabPanel=uitabgroup(f,...
       'Position', [0.05 0.12 0.9 0.63]);

generationTab = uitab(tabPanel,...
       'Title','Generation');
logRadGridPanel = uipanel(generationTab,...
        'Tag','logRadGridPanel',...
        'BorderType','none',...
		'FontSize',fontSize-4,...
        'BackgroundColor',get(f,'Color'),...
        'Position',[0 0 1 1]);
uicontrol(logRadGridPanel,'Style', 'text',...
       'String', 'Minimum radius:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.84 0.35 0.15]);
uicontrol(logRadGridPanel,'Style', 'edit',...
       'Tag','minimumRadiusEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.37 0.84 0.4 0.15]);
uicontrol(logRadGridPanel,'Style', 'text',...
       'String', 'Maximus Radius:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.68 0.35 0.15]);
uicontrol(logRadGridPanel,'Style', 'edit',...
       'Tag','maximumRadiusEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.37 0.68 0.4 0.15]);
uicontrol(logRadGridPanel,'Style', 'text',...
       'String', 'Number of Rings:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.52 0.35 0.15]);
uicontrol(logRadGridPanel,'Style', 'edit',...
       'Tag','nRingsEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.37 0.52 0.4 0.15]);
uicontrol(logRadGridPanel,'Style', 'text',...
       'String', 'Number of Angles:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.36 0.35 0.15]);
uicontrol(logRadGridPanel,'Style', 'edit',...
       'Tag','nAnglesEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.37 0.36 0.4 0.15]);
uicontrol(logRadGridPanel,'Style', 'text',...
       'String', 'Highlighted cells:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.2 0.35 0.15]);
uicontrol(logRadGridPanel,'Style', 'edit',...
       'Tag','highlightedCellsEditBox',...
       'String', '[]',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.37 0.2 0.4 0.15]);
uicontrol(logRadGridPanel,'Style', 'text',...
       'String', 'Total Cells:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.04 0.35 0.15]);
uicontrol(logRadGridPanel,'Style', 'text',...
       'Tag','totalCellsText',...
       'String', '0',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.37 0.04 0.35 0.15]);

visualizationTab = uitab(tabPanel,...
       'Title','Visualization');
framePanel = uipanel(visualizationTab,'Title','Frame Wires',...
        'BorderType','etchedin',...
		'FontSize',fontSize-4,...
        'BackgroundColor',get(f,'Color'),...
        'Position',[0.02 0.59 0.46 0.4]);
uicontrol(framePanel,'Style', 'text',...
       'String', 'Color:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.53 0.5 0.44]);
uicontrol(framePanel,'Style', 'pushbutton',...
       'Tag','edgeLineColorButton',...
       'BackgroundColor','w',...
       'FontSize',fontSize-6,...
       'Enable','off',...
       'HorizontalAlignment','left',...
       'Callback',{@OnSelectFrameColor_Callback},...
       'Units','normalize',...
       'Position', [0.52 0.53 0.4 0.44]);
uicontrol(framePanel,'Style', 'text',...
       'String', 'Line Width:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.05 0.5 0.44]);
uicontrol(framePanel,'Style', 'edit',...
       'Tag','edgeLineWidthEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.52 0.05 0.4 0.44]);

vertexPanel = uipanel(visualizationTab,'Title','Vertex',...
        'BorderType','etchedin',...
		'FontSize',fontSize-4,...
        'BackgroundColor',get(f,'Color'),...
        'Position',[0.025 0.05 0.3 0.52]);
uicontrol(vertexPanel,'Style', 'text',...
       'String', 'Color:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.68 0.5 0.25]);
uicontrol(vertexPanel,'Style', 'pushbutton',...
       'Tag','vColorButton',...
       'String','',...
       'BackgroundColor','k',...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','left',...
       'Enable','off',...
       'Callback',{@OnSelectVertexColor_Callback},...
       'Units','normalize',...
       'Position', [0.52 0.68 0.4 0.25]);
uicontrol(vertexPanel,'Style', 'text',...
       'String', 'Marker:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.38 0.5 0.25]);
uicontrol(vertexPanel,'Style', 'popupmenu',...
       'Tag','vMarkerCombo',...
       'String', {'+','o','*','.','x','s','d','^','v','<','>','p','h','none'},...
       'BackgroundColor','w',...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','left',...
       'Callback',{@OnSelectVertexMarker_Callback},...
       'Units','normalize',...
       'Position', [0.52 0.38 0.4 0.25]);
uicontrol(vertexPanel,'Style', 'text',...
       'String', 'Marker Size:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.05 0.5 0.28]);
uicontrol(vertexPanel,'Style', 'edit',...
       'Tag','vMarkerSizeEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.52 0.05 0.4 0.28]);
uicontrol(visualizationTab,'Style', 'checkbox',...
       'Tag','displayVertexCheckbox',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.27 0.49 0.03 0.08],...
       'Callback',{@displayVertexCheckbox_Callback});
    
highlightsPanel = uipanel(visualizationTab,'Title','Highlights',...
        'BorderType','etchedin',...
		'FontSize',fontSize-4,...
        'BackgroundColor',get(f,'Color'),...
        'Position',[0.35 0.05 0.3 0.52]);
uicontrol(highlightsPanel,'Style', 'text',...
       'String', 'Edge Color:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.68 0.5 0.25]);
uicontrol(highlightsPanel,'Style', 'pushbutton',...
       'Tag','highlightEdgeColorButton',...
       'String','',...
       'BackgroundColor','k',...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','left',...
       'Enable','off',...
       'Callback',{@OnSelectHighlightEdgeColor_Callback},...
       'Units','normalize',...
       'Position', [0.52 0.68 0.4 0.25]);
uicontrol(highlightsPanel,'Style', 'text',...
       'String', 'Face Color:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.38 0.5 0.25]);
uicontrol(highlightsPanel,'Style', 'pushbutton',...
       'Tag','highlightFaceColorButton',...
       'String','',...
       'BackgroundColor','k',...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','left',...
       'Enable','off',...
       'Callback',{@OnSelectHighlightFaceColor_Callback},...
       'Units','normalize',...
       'Position', [0.52 0.38 0.4 0.25]);
uicontrol(highlightsPanel,'Style', 'text',...
       'String', 'Face Alpha:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.05 0.5 0.28]);
uicontrol(highlightsPanel,'Style', 'edit',...
       'Tag','highlightFaceAlphaEditBox',...
       'String', '1',...
       'BackgroundColor','w',...
       'FontSize',fontSize-6,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateElement_Callback},...
       'Units','normalize',...
       'Position', [0.52 0.05 0.4 0.28]);

uicontrol(f,'Style', 'pushbutton',...
       'String', 'Save and Close',...
       'Tag','saveAndCloseButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.5 0.02 0.28 0.08],...
       'Callback',{@OnSaveAndClose_Callback});
uicontrol(f,'Style', 'pushbutton',...
       'String', 'Cancel',...
       'Tag','cancelButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.8 0.02 0.18 0.08],...
       'Callback',{@OnClose_Callback});

%% On Opening
handles = guihandles(f); %NOTE that only include those whose 'Tag' are not empty

if exist('element','var')
    if ~isa(element,'menaGrid')
        error('ICNA:guiMenaGrid:InvalidParameter',...
            'Parameter element must be a menaGrid.');
    end
    handles.currentElement.data=element;
else
    %By default crate a logarithmic radial grid
    handles.currentElement.data=logarithmicRadialGrid;
end
handles.currentElement.saved=true;

guidata(f,handles);
OnLoad_Callback(f);
theGrid = [];

%% Make GUI visible
set(f,'Name','ICNA - MENA Analysis');
set(f,'Visible','on');
waitfor(f);



%% displayVertexCheckbox Callback
function displayVertexCheckbox_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles = guidata(f);
if get(handles.displayVertexCheckbox,'Value')
    handles.currentElement.data=...
        set(handles.currentElement.data,'VertexVisible',true);
    set(handles.vColorButton,'Enable','on');
    set(handles.vMarkerCombo,'Enable','on');
    set(handles.vMarkerSizeEditBox,'Enable','on');
else
    handles.currentElement.data=...
        set(handles.currentElement.data,'VertexVisible',false);
    set(handles.vColorButton,'Enable','off');
    set(handles.vMarkerCombo,'Enable','off');
    set(handles.vMarkerSizeEditBox,'Enable','off');
end
handles.currentElement.saved=false;
guidata(f,handles);
end


%% OnClose callback
%On Close this window. Check whether data needs saving
function OnClose_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);
closeWindow=true;
if (~handles.currentElement.saved)
    element=[];
    %Offer the possibility of saving
    button = questdlg(['Current data is not saved. ' ...
        'Would you like to save the latest changes before ' ...
        'closing it?'],...
        'Close window','Save','Close','Cancel','Close');
    switch (button)
        case 'Save'
            OnSaveElement_Callback(hObject,eventData);
            closeWindow=true;
        case 'Close'
            closeWindow=true;
        case 'Cancel'
            closeWindow=false;
    end
end
 
if (closeWindow)
    clear handles.currentElement.data    
    %delete(get(gcf,'Children'));
    %delete(gcf);
    close(gcf);
end
end


%% OnLoad callback
%On Load a new grid
function OnLoad_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);


set(handles.idEditBox,'String',...
    num2str(get(handles.currentElement.data,'ID')));

%First of all ensure the combo has the right type of grid
tmpType=class(handles.currentElement.data);
switch(tmpType)
    case 'logarithmicRadialGrid'
        representativeString='Logarithmic Radial';
    otherwise
        error('ICNA:guiMenaGrid:OnLoad:UnexpectedGridType',...
            'Grid type not recognised.');
end

comboTypeStrings=get(handles.typeCombo,'String');
if isempty(comboTypeStrings)
    error('ICNA:guiMenaGrid:OnLoad:EmptyTypesString',...
        'Types of grid unexpectedly empty.');
elseif length(comboTypeStrings)==1
    %The type of typeString is a char.
    
    %No need to update the field, but...
    %the typeString must represent the current grid type
    %since there is only 1 type!
    if ~strcmp(comboTypeStrings,representativeString),...
        error('ICNA:guiMenaGrid:OnLoad:UnexpectedGridType',...
            'Grid type not recognised.');
    end
else
    %The type of typeString is a cell array
    
    %Update the Combo to the correct value
    found=false;
    value=1;
    for ii=1:length(comboTypeStrings)
        if strcmp(comboTypeStrings{ii},representativeString)
            found=true;
            value=ii;
            break;
        end
    end
    if (found)
        set(handles.typeCombo,'Value',value);
    end
end


%Now based on the type of Grid, decide which panel visualize
%and proceed to fill the grid type specific values accordingly
switch(tmpType)
    case 'logarithmicRadialGrid'
        set(handles.logRadGridPanel,'Visible','on');
        set(handles.minimumRadiusEditBox,'String',...
            num2str(get(handles.currentElement.data,'MinimumRadius')));
        set(handles.maximumRadiusEditBox,'String',...
            num2str(get(handles.currentElement.data,'MaximumRadius')));
        set(handles.nRingsEditBox,'String',...
            num2str(get(handles.currentElement.data,'NRings')));
        set(handles.nAnglesEditBox,'String',...
            num2str(get(handles.currentElement.data,'NAngles')));
        set(handles.highlightedCellsEditBox,'String',...
            mat2str(get(handles.currentElement.data,'HighlightCells')));
        set(handles.totalCellsText,'String',...
            num2str(getNCells(handles.currentElement.data)));
        
        
    otherwise
        error('ICNA:guiMenaGrid:OnLoad:UnexpectedGridType',...
            'Grid type not recognised.');
end


%Finally fill the (general) values
set(handles.vColorButton,'BackgroundColor',...
    get(handles.currentElement.data,'VertexColor'));
s=get(handles.vMarkerCombo,'String');
m=marker2value(get(handles.currentElement.data,'VertexMarker'),s);
%See auxiliary functions below
set(handles.vMarkerCombo,'Value',m);
set(handles.vMarkerSizeEditBox,'String',...
    num2str(get(handles.currentElement.data,'VertexMarkerSize')));
set(handles.displayVertexCheckbox,'Value',...
    get(handles.currentElement.data,'VertexVisible'));

set(handles.highlightEdgeColorButton,'BackgroundColor',...
    get(handles.currentElement.data,'HighlightEdgeColor'));
set(handles.highlightFaceColorButton,'BackgroundColor',...
    get(handles.currentElement.data,'HighlightFaceColor'));
set(handles.highlightFaceAlphaEditBox,'String',...
    num2str(get(handles.currentElement.data,'HighlightFaceAlpha')));

set(handles.edgeLineColorButton,'BackgroundColor',...
    get(handles.currentElement.data,'EdgeLineColor'));
set(handles.edgeLineWidthEditBox,'String',...
    num2str(get(handles.currentElement.data,'EdgeLineWidth')));



%Enable/Disable gui controls as necessary
set(handles.edgeLineColorButton,'Enable','on');
set(handles.highlightEdgeColorButton,'Enable','on');
set(handles.highlightFaceColorButton,'Enable','on');

if get(handles.currentElement.data,'VertexVisible')
    set(handles.vColorButton,'Enable','on');
    set(handles.vMarkerCombo,'Enable','on');
    set(handles.vMarkerSizeEditBox,'Enable','on');
else
    set(handles.vColorButton,'Enable','off');
    set(handles.vMarkerCombo,'Enable','off');
    set(handles.vMarkerSizeEditBox,'Enable','off');
end

end



%% OnUpdateElement callback
%Updates the current cluster with new information
function OnUpdateElement_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

try
    s=handles.currentElement.data;
    tmpId=str2double(get(handles.idEditBox,'String'));
    s=set(s,'ID',tmpId);

    s=set(s,'EdgeLineWidth',...
            str2double(get(handles.edgeLineWidthEditBox,'String')));
    s=set(s,'VertexMarkerSize',...
            str2double(get(handles.vMarkerSizeEditBox,'String')));
    s=set(s,'HighlightFaceAlpha',...
            str2double(get(handles.highlightFaceAlphaEditBox,'String')));


    tmpType=class(s);
    switch(tmpType)
        case 'logarithmicRadialGrid'
            s=set(s,'MinimumRadius',...
                str2double(get(handles.minimumRadiusEditBox,'String')));
            s=set(s,'MaximumRadius',...
                str2double(get(handles.maximumRadiusEditBox,'String')));
            s=set(s,'NRings',...
                str2double(get(handles.nRingsEditBox,'String')));
            s=set(s,'NAngles',...
                str2double(get(handles.nAnglesEditBox,'String')));
            s=set(s,'HighlightCells',...
                str2num(get(handles.highlightedCellsEditBox,'String')));
            set(handles.totalCellsText,'String',getNCells(s));
        otherwise
            error('ICNA:guiMenaGrid:OnUpdateElement_Callback:UnexpectedGridType',...
                'Grid type not recognised.');
    end

        
    handles.currentElement.data=s;
    handles.currentElement.saved=false;
catch ME
    msg={ME.identifier,'', ME.message};
    warndlg(msg,'guiCluster - Update Element');
    %Refresh those wrong values with the correct ones
    set(handles.idEditBox,'String',...
        num2str(get(handles.currentElement.data,'ID')))

    set(handles.edgeLineWidthEditBox,'String',...
        num2str(get(handles.currentElement.data,'EdgeLineWidth')))
    set(handles.vMarkerSizeEditBox,'String',...
        num2str(get(handles.currentElement.data,'VertexMarkerSize')))
    set(handles.highlightFaceAlphaEditBox,'String',...
        num2str(get(handles.currentElement.data,'HighlightFaceAlpha')))
    
    tmpType=class(s);
    switch(tmpType)
        case 'logarithmicRadialGrid'
            set(handles.minimumRadiusEditBox,'String',...
                num2str(get(handles.currentElement.data,'MinimumRadius')));
            set(handles.maximumRadiusEditBox,'String',...
                num2str(get(handles.currentElement.data,'MaximumRadius')));
            set(handles.nRingsEditBox,'String',...
                num2str(get(handles.currentElement.data,'NRings')));
            set(handles.nAnglesEditBox,'String',...
                num2str(get(handles.currentElement.data,'NAngles')));
            set(handles.highlightedCellsEditBox,'String',...
                num2str(get(handles.currentElement.data,'HighlightCells')));
            set(handles.totalCellsText,'String',getNCells(s));
        otherwise
            error('ICNA:guiMenaGrid:OnUpdateElement_Callback:UnexpectedGridType',...
                'Grid type not recognised.');
    end
end
guidata(hObject,handles);

end

%% OnSaveElement Callback
%Save the changes to the grid
function OnSaveElement_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
OnUpdateElement_Callback(hObject,eventData)
handles = guidata(f);
theGrid = handles.currentElement.data;
handles.currentElement.saved=true;
guidata(f,handles);
end


%% OnSaveAndClose callback
%On Save and Closing this window
function OnSaveAndClose_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
OnSaveElement_Callback(hObject,eventData);
OnClose_Callback(hObject,eventData);
end



%% OnSelectFrameColor Callback
%Edge line color button callback
function OnSelectFrameColor_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles = guidata(f);
c=uisetcolor(get(handles.currentElement.data,'EdgeLineColor'));
handles.currentElement.data=...
    set(handles.currentElement.data,'EdgeLineColor',c);
    %this is valid even if cancelled uisetcolor
set(handles.edgeLineColorButton,'BackgroundColor',c);
handles.currentElement.saved=false;
guidata(f,handles);
end


%% OnSelectVertexColor Callback
%Vertex color button callback
function OnSelectVertexColor_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles = guidata(f);
c=uisetcolor(get(handles.currentElement.data,'VertexColor'));
handles.currentElement.data=...
    set(handles.currentElement.data,'VertexColor',c);
    %this is valid even if cancelled uisetcolor
set(handles.vColorButton,'BackgroundColor',c);
handles.currentElement.saved=false;
guidata(f,handles);
end


%% OnSelectVertexMarker Callback
%Vertex marker button callback
function OnSelectVertexMarker_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles = guidata(f);
m=get(handles.vMarkerCombo,'String');
val=get(handles.vMarkerCombo,'Value');
handles.currentElement.data=...
    set(handles.currentElement.data,'VertexMarker',m{val});
handles.currentElement.saved=false;
guidata(f,handles);
end


%% OnSelectHighlightEdgeColor Callback
%Highlighted cell edge color button callback
function OnSelectHighlightEdgeColor_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles = guidata(f);
c=uisetcolor(get(handles.currentElement.data,'HighlightEdgeColor'));
handles.currentElement.data=...
    set(handles.currentElement.data,'HighlightEdgeColor',c);
    %this is valid even if cancelled uisetcolor
set(handles.highlightEdgeColorButton,'BackgroundColor',c);
handles.currentElement.saved=false;
guidata(f,handles);
end



%% OnSelectHighlightFaceColor Callback
%Highlighted cell face color button callback
function OnSelectHighlightFaceColor_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles = guidata(f);
c=uisetcolor(get(handles.currentElement.data,'HighlightFaceColor'));
handles.currentElement.data=...
    set(handles.currentElement.data,'HighlightFaceColor',c);
    %this is valid even if cancelled uisetcolor
set(handles.highlightFaceColorButton,'BackgroundColor',c);
handles.currentElement.saved=false;
guidata(f,handles);
end



end


%% AUXILIARY FUNCTIONS
function val=marker2value(marker,StringList)
%Simply computes in which position of the string list is
%the marker
nStrings=length(StringList);
val=1;
for ii=1:nStrings
    if strcmp(marker,StringList{ii})
       val=ii;
       break
    end
end

end