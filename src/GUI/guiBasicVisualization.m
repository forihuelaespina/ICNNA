function guiBasicVisualization(elem)
%guiBasicVisualization GUI for generation of basic plots
%
% t=guiBasicVisualization(elem) displays a graphical user
%   interface (GUI) for generation of basic plots.
%
% This is only a shell for the batchBasicVisualization function.
%
%% Parameters
%
% elem - An experiment.
%
% Copyright 2010-16
% @date: 15-Jun-2010
% @author Felipe Orihuela-Espina
% @modified: 15-May-2016
%
% See also guiExperiment, batchBasicVisualization, experiment
%




%% Log
%
% 15-May-2016 (FOE): Abandon feature:
%       batchBasicVisualization.m no longer permits choosing export formats.
%       Consequently the tab for output formats has been removed.
%
%


if ~isa(elem,'experiment')
    error(['ICNA:guiBasicVisualization:InvalidParameter' ...
           ' - Parameter elem must be of class experiment.']);
end

%% Initialize the figure
%...and hide the GUI as it is being constructed
% screenSize=get(0,'ScreenSize');
% wOffset=round(screenSize(3)/10);
% hOffset=round(screenSize(4)/10);
% width=screenSize(3)-round(screenSize(3)/4);
% height=screenSize(4)-round(screenSize(4)/4);
%f=figure('Visible','off','Position',[wOffset,hOffset,width,height]);
%f=figure('Visible','off','Position',[100,100,850,640]);
width=850;
height=640;
scSize= get( 0, 'ScreenSize' );
    %WATCH OUT!  The ScreenSize property is static. Its values
    %are read-only at MATLAB startup and not updated if system
    %display settings change.
    %
    %There seems to be a dynamic version:
    %
    %   http://www.mathworks.com/matlabcentral/fileexchange/10957-get-screen-size-dynamic
    %
    %but I haven't tested.
    %

f=figure('Visible','off',...
         'Position',[round((scSize(3)-width)/2),...
                     round((scSize(4)-height)/2),...
                     width,...
                     height]);
set(f,'NumberTitle','off');
set(f,'MenuBar','none'); %Hide MATLAB figure menu
movegui('center');

%% Add components
fontSize=13;
bgColor=get(f,'Color');

%Main area elements
datasetSelectionPanel = uipanel(f,...
        'BorderType','line',...
		'FontSize',fontSize-2,...
        'BackgroundColor',get(f,'Color'),...
        'Position',[0.01 0.65 0.96 0.32]);

uicontrol(datasetSelectionPanel,'Style', 'text',...
       'String', 'Subjects IDs:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.76 0.25 0.23]);
uicontrol(datasetSelectionPanel,'Style', 'edit',...
       'Tag','subjectsEditBox',...
       'String','[]',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateSubjects_Callback},...
       'Units','normalize',...
       'Position', [0.27 0.76 0.4 0.23]);
uicontrol(datasetSelectionPanel,'Style', 'text',...
       'String', 'Sessions IDs:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.51 0.25 0.23]);
uicontrol(datasetSelectionPanel,'Style', 'edit',...
       'Tag','sessionsEditBox',...
       'String','[]',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateSessions_Callback},...
       'Units','normalize',...
       'Position', [0.27 0.51 0.4 0.23]);
uicontrol(datasetSelectionPanel,'Style', 'text',...
       'String', 'Data Sources:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.26 0.25 0.23]);
uicontrol(datasetSelectionPanel,'Style', 'edit',...
       'Tag','dataSourcesEditBox',...
       'String','[]',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateDataSources_Callback},...
       'Units','normalize',...
       'Position', [0.27 0.26 0.4 0.23]);
uicontrol(datasetSelectionPanel,'Style', 'text',...
       'String', ['Empty fields above select all. ' ...
                  'Use '':'' to select a range.' ],...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','center',...
       'Units','normalize',...
       'Position', [0.02 0.01 0.93 0.23]);

   
tabPanel=uitabgroup(f,'Position', [0.01 0.10 0.96 0.53]);

temporalTab = uitab(tabPanel,'Title','Temporal');

uicontrol(temporalTab,'Style', 'checkbox',...
       'Tag','schavgCheckbox',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.01 0.81 0.04 0.08]);
uicontrol(temporalTab,'Style', 'text',...
       'String', 'Series SCHAVG (Single channel; Averaged across blocks)',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.81 0.92 0.08]);

uicontrol(temporalTab,'Style', 'checkbox',...
       'Tag','schnbaCheckbox',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.01 0.71 0.04 0.08]);
uicontrol(temporalTab,'Style', 'text',...
       'String', 'Series SCHNBA (Single channel; Non Averaged across blocks)',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.71 0.92 0.08]);

uicontrol(temporalTab,'Style', 'checkbox',...
       'Tag','achavgCheckbox',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.01 0.61 0.04 0.08]);
uicontrol(temporalTab,'Style', 'text',...
       'String', 'Series ACHAVG (All channels; Block Averaged)',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.61 0.92 0.08]);

uicontrol(temporalTab,'Style', 'checkbox',...
       'Tag','achnbaCheckbox',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.01 0.51 0.04 0.08]);
uicontrol(temporalTab,'Style', 'text',...
       'String', 'Series ACHNBA (All channels; Non Averaged across blocks)',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.51 0.92 0.08]);

tmp=uicontrol(temporalTab,'Style', 'text',...
       'String', 'Grand averages',...
       'BackgroundColor',bgColor,...
       'ForegroundColor','b',...
       'FontSize',fontSize,...
       'FontWeight','bold',...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.41 0.92 0.08]);
   
%    Series GAACHAVG:
%       + Currently assumes that all elements share the probe mode,
%       and number of channels.
%       + Averaging is made after resampling (compulsory and currently
%       defaulted to [10 20 10]) across elements on a
%       sample by sample basis over clean data without taking into
%       consideration the timeline. This is specially relevant for
%       self pace tasks.
%       + The timeline of the first element of the set is used
%       to establish the condition/stimulus tags.
uicontrol(temporalTab,'Style', 'checkbox',...
       'Tag','gaachavgCheckbox',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.01 0.31 0.04 0.08]);
uicontrol(temporalTab,'Style', 'text',...
       'String', ['Series GAACHAVG (Grand Average; ' ...
                  'All channels; Block averaged)'],...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.31 0.92 0.08]);
uicontrol(temporalTab,'Style', 'text',...
       'String', ['Series GAACHAVG assumes that all elements ' ...
                'share the probe mode, and number of channels. ' ...
                'Averaging is made after resampling (compulsory ' ...
                'and currently defaulted to [10 20 10]) across ' ...
                'elements on a sample by sample basis over clean ' ...
                'data without taking into consideration the ' ...
                'timeline. This is specially relevant for self ' ...
                'pace tasks. The timeline of the first element ' ...
                'of the set is used to establish the ' ...
                'condition/stimulus tags.'],...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.14 0.92 0.16]);


   
   
topoTab = uitab(tabPanel,'Title','Spatial/Topographic');
   
uicontrol(topoTab,'Style', 'checkbox',...
       'Tag','topoavgCheckbox',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.01 0.81 0.04 0.08]);
uicontrol(topoTab,'Style', 'text',...
       'String', 'Series TOPOAVG (Task only data; Block Averaged)',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.81 0.92 0.08]);

uicontrol(topoTab,'Style', 'checkbox',...
       'Tag','toponbaCheckbox',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.01 0.71 0.04 0.08]);
uicontrol(topoTab,'Style', 'text',...
       'String', 'Series TOPONBA (Task only data; Non Averaged across blocks)',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.06 0.71 0.92 0.08]);

topoOptionsPanel = uipanel(topoTab,...
        'BorderType','line',...
		'FontSize',fontSize-2,...
        'BackgroundColor',get(f,'Color'),...
        'Position',[0.01 0.06 0.96 0.6]);
uicontrol(topoOptionsPanel,'Style', 'radiobutton',...
       'Tag','taskOnlyRadiobutton',...
       'Min',0,...
       'Max',1,...
       'Value',1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.03 0.71 0.04 0.13],...
       'Callback',{@OnTaskOnlyRadiobutton_Callback});
uicontrol(topoOptionsPanel,'Style', 'text',...
       'String', 'Task only data',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.08 0.71 0.88 0.13]);
uicontrol(topoOptionsPanel,'Style', 'radiobutton',...
       'Tag','taskMinusBaselineRadiobutton',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.03 0.56 0.04 0.13],...
       'Callback',{@OnTaskMinusBaselineRadiobutton_Callback});
uicontrol(topoOptionsPanel,'Style', 'text',...
       'String', 'Task - Baseline',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.08 0.56 0.88 0.13]);
taskMinusBaslinePanel = uipanel(topoOptionsPanel,...
        'BorderType','line',...
		'FontSize',fontSize-2,...
        'BackgroundColor',get(f,'Color'),...
        'Position',[0.01 0.32 0.96 0.55]);
uicontrol(topoOptionsPanel,'Style', 'text',...
       'String', 'Baseline Length (num. samples)',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.11 0.43 0.32 0.13]);
uicontrol(topoOptionsPanel,'Style', 'edit',...
       'Tag','baselineLengthEditBox',...
       'Min',0,...
       'Max',1,...
       'String','5',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Enable','off',...
       'Position', [0.45 0.42 0.06 0.15],...
       'Callback',{@OnBaselineLengthEditBox_Callback});
uicontrol(topoOptionsPanel,'Style', 'text',...
       'String', 'Use -1 to use all available samples',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.52 0.43 0.42 0.13]);
uicontrol(topoOptionsPanel,'Style', 'text',...
       'String', 'Break delay (num. samples)',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.01 0.07 0.29 0.15]);
uicontrol(topoOptionsPanel,'Style', 'edit',...
       'Tag','breakDelayEditBox',...
       'Min',0,...
       'Max',1,...
       'String','0',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Enable','on',...
       'Position', [0.31 0.07 0.06 0.16],...
       'Callback',{@OnBreakDelayEditBox_Callback});
uicontrol(topoOptionsPanel,'Style', 'text',...
       'String', 'Use a negative value to shift window prior to stimulus onset',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.40 0.07 0.57 0.15]);
   
   
   

uicontrol(f,'Style', 'pushbutton',...
       'String', 'Generate Plots',...
       'Tag','generateButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','center',...
       'Units','normalize',...
       'Enable','on',...
       'Position', [0.5 0.02 0.28 0.06],...
       'Callback',{@OnGeneratePlots_Callback});
uicontrol(f,'Style', 'pushbutton',...
       'String', 'Close',...
       'Tag','closeButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.78 0.02 0.18 0.06],...
       'Callback',{@OnQuit_Callback});

%% On Opening
handles = guihandles(f); %NOTE that only include those whose 'Tag' are not empty
handles.currentElement.data=elem;
guidata(f,handles);

handles.topo_baselineLength = ...
    str2double(get(handles.baselineLengthEditBox,'String'));
handles.topo_breakDelay = ...
    str2double(get(handles.breakDelayEditBox,'String'));
guidata(f,handles);

[I,~,COL]=unfoldExperiment(elem);
handles.currentElement.subjectsIDs=unique(I(:,COL.SUBJECT))';
handles.currentElement.sessionsIDs=unique(I(:,COL.SESSION))';
handles.currentElement.dataSourcesIDs=unique(I(:,COL.DATASOURCE))';
guidata(f,handles);

set(handles.subjectsEditBox,'String',...
    mat2str(handles.currentElement.subjectsIDs));
set(handles.sessionsEditBox,'String',...
    mat2str(handles.currentElement.sessionsIDs));
set(handles.dataSourcesEditBox,'String',...
    mat2str(handles.currentElement.dataSourcesIDs));


%% Make GUI visible
set(f,'Name','ICNA - Basic Visualization');
set(f,'Visible','on');
waitfor(f);

%% OnBaselineLengthEditBox callback
%Ensure input is an integer number
function OnBaselineLengthEditBox_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

try
    val = str2double(get(handles.baselineLengthEditBox,'String'));
    if (isscalar(val) && floor(val)==val && val>=-1)
        %Valid integer input
        handles.topo_baselineLength = val;
    else
        error('Invalid input'); %Note that this will not be visualized
                                %but will execute the catch statement
                                %to revert to value
    end 
catch ME
    %msg={ME.identifier,'', ME.message};
    msg='Baseline must be a positive integer, 0 or -1';
    warndlg(msg,'ICNA - guiBasicVisualization');
    %Revert to value
    set(handles.baselineLengthEditBox,'String',handles.topo_baselineLength);
end

guidata(hObject,handles);
end

%% OnBreakDelayEditBox callback
%Ensure input is an integer number
function OnBreakDelayEditBox_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

try
    val = str2double(get(handles.breakDelayEditBox,'String'));
    if (isscalar(val) && floor(val)==val)
        %Valid integer input
        handles.topo_breakDelay = val;
    else
        error('Invalid input'); %Note that this will not be visualized
                                %but will execute the catch statement
                                %to revert to value
    end 
catch ME
    %msg={ME.identifier,'', ME.message};
    msg='Break delay must be an integer value';
    warndlg(msg,'ICNA - guiBasicVisualization');
    %Revert to value
    set(handles.breakDelayEditBox,'String',handles.topo_breakDelay);
end

guidata(hObject,handles);
end



%% OnGeneratePlots callback
%Generates the selected plots
function OnGeneratePlots_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

elem=handles.currentElement.data;

directory_name = uigetdir('','Select destination folder');
if directory_name~=0
    directory_name(find(directory_name=='\'))='/';
    directory_name=[directory_name '/'];
    options.destinationFolder = directory_name;
    
    %try
        [x, status] = str2num(get(handles.subjectsEditBox,'String'));
        if ~status
            x=handles.currentElement.subjectsIDs;
        end
        options.whichSubjects = x;
        
        [x, status] = str2num(get(handles.sessionsEditBox,'String'));
        if ~status
            x=handles.currentElement.sessionsIDs;
        end
        options.whichSessions = x;
        
        [x, status] = str2num(get(handles.dataSourcesEditBox,'String'));
        if ~status
            x=handles.currentElement.dataSourcesIDs;
        end
        options.whichDataSources = x;
        
        options.seriesSCHAVG = get(handles.schavgCheckbox,'Value');
        options.seriesSCHNBA = get(handles.schnbaCheckbox,'Value');
        options.seriesACHAVG = get(handles.achavgCheckbox,'Value');
        options.seriesACHNBA = get(handles.achnbaCheckbox,'Value');
        
        options.seriesGAACHAVG = get(handles.gaachavgCheckbox,'Value');
        
        options.seriesTOPOAVG = get(handles.topoavgCheckbox,'Value');
        options.seriesTOPONBA = get(handles.toponbaCheckbox,'Value');
        options.seriesTOPO_taskOnly = ...
                        get(handles.taskOnlyRadiobutton,'Value');
        options.seriesTOPO_baselineLength = ...
                 str2double(get(handles.baselineLengthEditBox,'String'));
        options.seriesTOPO_breakDelay = ...
                 str2double(get(handles.breakDelayEditBox,'String'));
        
        
        options.save=true;
        
        %options
        batchBasicVisualization(elem,options);
        
        h=msgbox('Done!','ICNA','modal');
        uiwait(h);
%     catch ME
%         warndlg([ME.identifier ': ' ME.message ...
%             'Unable to generate plots.'],'ICNA');
%     end
end

end



%% OnTaskOnlyRabiobutton callback
%Switch between task only and task minus baseline topographic options
function OnTaskOnlyRadiobutton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

if get(handles.taskOnlyRadiobutton,'Value')
    set(handles.taskMinusBaselineRadiobutton,'Value',0);
    set(handles.baselineLengthEditBox,'Enable','off');
else
    set(handles.taskMinusBaselineRadiobutton,'Value',1);
    set(handles.baselineLengthEditBox,'Enable','on');
end

guidata(hObject,handles);
end

%% OnTaskMinusBaselineRabiobutton callback
%Switch between task only and task minus baseline topographic options
function OnTaskMinusBaselineRadiobutton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

if get(handles.taskMinusBaselineRadiobutton,'Value')
    set(handles.taskOnlyRadiobutton,'Value',0);
    set(handles.baselineLengthEditBox,'Enable','on');
else
    set(handles.taskOnlyRadiobutton,'Value',1);
    set(handles.baselineLengthEditBox,'Enable','off');
end

guidata(hObject,handles);
end

%% OnUpdateSubjects callback
%Check that the subject selection field can be read
function OnUpdateSubjects_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

try
    [~, status] = str2num(get(handles.subjectsEditBox,'String'));
    if ~status
        set(handles.subjectsEditBox,'String',...
            mat2str(handles.currentElement.subjectsIDs));
    end
catch ME
    msg={ME.identifier,'', ME.message};
    warndlg(msg,'guiBasicVisualization- Update Subject');
    set(handles.subjectsEditBox,'String',...
        mat2str(handles.currentElement.subjectsIDs));

end
guidata(hObject,handles);

end

%% OnUpdateSessions callback
%Check that the session selection field can be read
function OnUpdateSessions_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

try
    [~, status] = str2num(get(handles.sessionsEditBox,'String'));
    if ~status
        set(handles.sessionsEditBox,'String',...
            mat2str(handles.currentElement.sessionsIDs));
    end
catch ME
    msg={ME.identifier,'', ME.message};
    warndlg(msg,'guiBasicVisualization - Update Session');
    set(handles.sessionsEditBox,'String',...
        mat2str(handles.currentElement.sessionsIDs));

end
guidata(hObject,handles);

end

%% OnUpdateDataSources callback
%Check that the dataSources selection field can be read
function OnUpdateDataSources_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

try
    [~, status] = str2num(get(handles.dataSourcesEditBox,'String'));
    if ~status
        set(handles.dataSourcesEditBox,'String',...
            mat2str(handles.currentElement.dataSourcesIDs));
    end
catch ME
    msg={ME.identifier,'', ME.message};
    warndlg(msg,'guiBasicVisualization - Update DataSources');
    set(handles.dataSourcesEditBox,'String',...
        mat2str(handles.currentElement.dataSourcesIDs));

end
guidata(hObject,handles);

end


%% OnQuit callback
%Clear memory and exit the application
function OnQuit_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
delete(get(gcf,'Children'));
delete(gcf);
end

end


