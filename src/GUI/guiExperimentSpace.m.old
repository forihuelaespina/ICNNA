function element=guiExperimentSpace(varargin)
%guiExperimentSpace GUI for computing an experimentSpace
%
% a=guiExperimentSpace(a) displays a graphical user interface (GUI) for
%   modifying parameters and running an experimentSpace
%   the experimentSpace a. The function returns the updated
%   experimentSpace, or the unchanged experimentSpace if the action
%   is cancelled or the window closed without saving.
%
% a=guiExperimentSpace(...,'InputFilename',filename) where filename
%   holds the name of the file which stores the experiment dataset.
%
% a=guiExperimentSpace(...,'OutputFilename',filename) where filename
%   holds the name of the file onto which storing the experimentSpace.
%
% Copyright 2008
% @date: 3-Jul-2008
% @author Felipe Orihuela-Espina
%
% See also guiExperiment, guiExperimentSpace, wizExperimentSpace
%

element=varargin{1};
varargin(1)=[];
inputFilename='';
outputFilename='';
while (~isempty(varargin))
    prop=varargin{1};
    val=varargin{2};
    varargin(1:2)=[];
    switch prop
        case 'InputFilename'
            inputFilename=val;
        case 'OutputFilename'
            outputFilename=val;
        otherwise
            error('Property not recognised');
    end
end



%% Initialize the figure
%...and hide the GUI as it is being constructed
width=600;
height=420;
f=figure('Visible','off','Position',[100,500,width,height]);
set(f,'NumberTitle','off');
set(f,'MenuBar','none'); %Hide MATLAB figure menu
set(f,'CloseRequestFcn',{@OnQuit_Callback});
movegui(f,'center');

%% Add components
fontSize=16;
bgColor=get(f,'Color');


uicontrol(f,'Style', 'text',...
       'String', 'Name:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.9 0.2 0.06]);
uicontrol(f,'Style', 'text',...
       'Tag','elementNameText',...
       'String', 'NONAME',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.25 0.9 0.5 0.06]);

uicontrol(f,'Style', 'text',...
       'String', 'Status:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.82 0.2 0.06]);
uicontrol(f,'Style', 'text',...
       'Tag','runStatusText',...
       'String', 'NOT COMPUTED',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.25 0.82 0.5 0.06]);   
   

paramTabPanel=uitabgroup(f,...
       'Position', [0.05 0.16 0.9 0.65]);
 
    
blockSplittingTab = uitab(paramTabPanel,...
       'Title','Block Splitting');
uicontrol(blockSplittingTab,'Style', 'text',...
       'String', 'Baseline Length Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.75 0.5 0.12]);
uicontrol(blockSplittingTab,'Style', 'edit',...
       'Tag','baselineLengthEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.75 0.32 0.12]);
uicontrol(blockSplittingTab,'Style', 'text',...
       'String', 'Select Experiment:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.05 0.55 0.5 0.12]);
uicontrol(blockSplittingTab,'Style', 'edit',...
       'Tag','experimentFilenameEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.05 0.4 0.6 0.12]);
uicontrol(blockSplittingTab,'Style', 'pushbutton',...
       'String', 'Browse...',...
       'Tag','experimentBrowseButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.7 0.4 0.25 0.16],...
       'Callback',{@OnExperimentBrowse_Callback});
uicontrol(blockSplittingTab,'Style', 'text',...
       'String', 'Save to File (Optional):',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.05 0.25 0.5 0.12]);
uicontrol(blockSplittingTab,'Style', 'edit',...
       'Tag','experimentSpaceFilenameEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.05 0.1 0.6 0.12]);
uicontrol(blockSplittingTab,'Style', 'pushbutton',...
       'String', 'Browse...',...
       'Tag','experimentSpaceBrowseButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.7 0.1 0.25 0.16],...
       'Callback',{@OnExperimentSpaceBrowse_Callback});
    
    
resamplingTab = uitab(paramTabPanel,...
        'Title','Resampling');
uicontrol(resamplingTab,'Style', 'text',...
       'String', 'Perform resampling:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.75 0.5 0.12]);
uicontrol(resamplingTab,'Style', 'checkbox',...
       'Tag','resampleCheckbox',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.55 0.75 0.32 0.12],...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback});
uicontrol(resamplingTab,'Style', 'text',...
       'String', 'Baseline Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.5 0.5 0.12]);
uicontrol(resamplingTab,'Style', 'edit',...
       'Tag','baselineEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.5 0.32 0.12]);
uicontrol(resamplingTab,'Style', 'text',...
       'String', 'Task Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.25 0.5 0.12]);
uicontrol(resamplingTab,'Style', 'edit',...
       'Tag','taskEditBox',...
       'String', '20',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.25 0.32 0.12]);
uicontrol(resamplingTab,'Style', 'text',...
       'String', 'Rest Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.02 0.5 0.12]);
uicontrol(resamplingTab,'Style', 'edit',...
       'Tag','restEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.02 0.32 0.12]);

   
averagingTab = uitab(paramTabPanel,...
        'Title','Averaging');
uicontrol(averagingTab,'Style', 'text',...
       'String', 'Perform average:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.7 0.5 0.12]);
uicontrol(averagingTab,'Style', 'checkbox',...
       'Tag','averageCheckbox',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.55 0.7 0.35 0.12],...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback});

   

windowSelectionTab = uitab(paramTabPanel,...
        'Title','Window Selection');
uicontrol(windowSelectionTab,'Style', 'text',...
       'String', 'Perform window selection:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.68 0.5 0.12]);
uicontrol(windowSelectionTab,'Style', 'checkbox',...
       'Tag','fixWindowCheckbox',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.55 0.68 0.32 0.12],...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback});
uicontrol(windowSelectionTab,'Style', 'text',...
       'String', 'Window Onset:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.35 0.5 0.12]);
uicontrol(windowSelectionTab,'Style', 'edit',...
       'Tag','onsetEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.35 0.35 0.12]);
uicontrol(windowSelectionTab,'Style', 'text',...
       'String', 'Duration:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.02 0.5 0.12]);
uicontrol(windowSelectionTab,'Style', 'edit',...
       'Tag','durationEditBox',...
       'String', '20',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.02 0.35 0.12]);
   



uicontrol(f,'Style', 'pushbutton',...
       'String', 'Generate Database',...
       'Tag','generateDBButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','center',...
       'Units','normalize',...
       'Enable','off',...
       'Position', [0.15 0.02 0.4 0.1],...
       'Callback',{@OnGenerateDatabase_Callback});

uicontrol(f,'Style', 'pushbutton',...
       'String', 'Compute',...
       'Tag','runButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','center',...
       'Units','normalize',...
       'Position', [0.6 0.02 0.2 0.1],...
       'Callback',{@OnComputing_Callback});

uicontrol(f,'Style', 'pushbutton',...
       'String', 'Close',...
       'Tag','closeButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.81 0.02 0.18 0.1],...
       'Callback',{@OnQuit_Callback});
   

%% On Opening
handles = guihandles(f); %NOTE that only include those whose 'Tag' are not empty

set(handles.experimentFilenameEditBox,'String',inputFilename);
set(handles.experimentSpaceFilenameEditBox,'String',outputFilename);

handles.currentElement.data=experimentSpace(element);
handles.currentElement.saved=get(element,'RunStatus');
set(handles.elementNameText,'String',get(element,'Name'));
set(handles.baselineLengthEditBox,'String',get(element,'BaselineSamples'));
guidata(f,handles);
myRedraw(f);

 
%% Make GUI visible
set(f,'Name','ICNA - Compute Experiment Space');
set(f,'Visible','on');
waitfor(f);



%% OnClose callback
%On Closing this window. Check whether data needs saving
function OnClose_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);
closeWindow=true;
if (~get(handles.currentElement.data,'RunStatus'))
    element=[];
    %Offer the possibility of saving
    button = questdlg(['Experiment Space has not been computed ' ...
        'with current parameters. ' ...
        'Would you like to compute it now?'],...
        'Compute','Close','Close');
    switch (button)
        case 'Compute'
            OnComputing_Callback(hObject,eventData);
            closeWindow=true;
        case 'Close'
            closeWindow=true;
    end
end
 
if (closeWindow)
    handles.currentElement.data=[]; 
    handles.currentElement.saved=true;
    
    guidata(hObject,handles);
end
myRedraw(hObject);
end

%% OnExperimentBrowse callback
%Browse for the file of the experiment dataset
function OnExperimentBrowse_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

[FileName,PathName] = uigetfile('*.mat','WindowStyle');
if isequal(FileName,0)
    %disp('Operation ''Open experiment'' cancelled')
else
    %Do not open the file yet. Just store the name.
    handles=guidata(hObject);
    set(handles.experimentFilenameEditBox, ...
            'String',[PathName FileName]);
    guidata(hObject,handles);
end
end

%% OnExperimentSpaceBrowse callback
%Browse for the file to save the experimentSpace
function OnExperimentSpaceBrowse_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
%Construct a default name 
name=get(handles.currentElement.data,'Name');
defName=[name '_' datestr(now,29) '.mat'];
[FileName,PathName] = uiputfile('*.mat','WindowStyle',defName);
if isequal(FileName,0)
    %disp('Operation ''Open experiment'' cancelled')
else
    set(handles.experimentSpaceFilenameEditBox,...
        'String',[PathName FileName]);
    guidata(hObject,handles);
end
end

%% OnGenerateDatabase callback
%Generates a database
function OnGenerateDatabase_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

expSpace=handles.currentElement.data;
if get(expSpace,'RunStatus')

    directory_name = uigetdir('','Select destination folder');
    if directory_name~=0
        directory_name(find(directory_name=='\'))='/';
        directory_name=[directory_name '/'];

        options.outputFilename=[directory_name ...
            get(expSpace,'Name') '_DB.csv'];
        options.helpFilename=[directory_name ...
            get(expSpace,'Name') '_DB_Help.txt'];
        try
            [db]=generateDB(expSpace,options);
            clear db
            h=msgbox('Done!','ICNA','modal');
            uiwait(h);
        catch ME
            warndlg([ME.identifier ': ' ME.message ...
                'Unable to generate DB.'],'ICNA');
        end
    end
end

end

%% OnQuit callback
%Clear memory and exit the application
function OnQuit_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
OnClose_Callback(hObject,eventData);
delete(get(gcf,'Children'));
delete(gcf);
end


%% OnComputing callback
%Computes the Experiment Space with the current configuration
function OnComputing_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

%Check the parameters
OnUpdateExperimentSpaceParameters_Callback(hObject,eventData)

if (isempty(get(handles.experimentFilenameEditBox,'String')))
    warndlg('Invalid experiment dataset filename',...
            'Computing Experiment Space:');
else

    experimentFilename=get(handles.experimentFilenameEditBox,'String');

    %Load experiment.
    h=waitbar(0,'Computing Experiment Space: Loading experiment dataset');
    var=load(experimentFilename);
    names = fieldnames(var);
    found=false;
    for ii=length(var):-1:1
        e=getfield(var,names{ii});
        if (isa(e,'experiment'))
            found=true;
            break;
        end
    end
    if (~found)
        error('An experimental dataset has not been found.');
    end

    waitbar(0.5,h,'Computing Experiment Space: Computing Experiment Space');

    set(handles.closeButton,'Enable','off');
    set(handles.runButton,'Enable','off');
    set(handles.generateDBButton,'Enable','off');
    %Call to computeExperimentSpace
    handles.currentElement.data=compute(handles.currentElement.data,e);
    element=handles.currentElement.data;

    set(handles.closeButton,'Enable','on');
    set(handles.runButton,'Enable','on');
    set(handles.generateDBButton,'Enable','on');
    
    waitbar(0.95,h,'Computing Experiment Space: Clearing memory');
    %Clear the experiment
    clear var e
    waitbar(1,h,'Computing Experiment Space: Done');
    close(h);

    experimentSpaceFilename=...
        get(handles.experimentSpaceFilenameEditBox,'String');
    if (~isempty(experimentSpaceFilename))
        theExperimentSpace=element;
        save(experimentSpaceFilename,'theExperimentSpace');
        handles.currentElement.saved=true;
    end

    guidata(hObject,handles);
    myRedraw(f);
end
end




%% OnUpdateExperimentSpaceParameters callback
%Updates the current experimentSpace with new information
function OnUpdateExperimentSpaceParameters_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

%Block Splitting parameters
tmp=str2double(get(handles.baselineLengthEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<=0)
    warndlg(['Invalid block splitting parameter. ' ...
            'Not a valid number of samples for baseline.'],...
            'Experiment Space Construction');
else
    s=set(s,'BaselineSamples',tmp);   
end


%Resample parameters
resampleFlag=get(handles.resampleCheckbox,'Value');
s=set(s,'Resampled',resampleFlag);

tmp=str2double(get(handles.baselineEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid resampling parameter. ' ...
            'Not a valid number of samples for baseline.'],...
            'Experiment Space Construction');
else
    s=set(s,'RS_Baseline',tmp);   
end
tmp=str2double(get(handles.taskEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid resampling parameter. ' ...
            'Not a valid number of samples for task block.'],...
            'Experiment Space Construction');
else
    s=set(s,'RS_Task',tmp);    
end
tmp=str2double(get(handles.restEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid resampling parameter. ' ...
            'Not a valid number of samples for post-task rest.'],...
            'Experiment Space Construction');
else
    s=set(s,'RS_Rest',tmp);    
end

%Average parameters
s=set(s,'Averaged',get(handles.averageCheckbox,'Value'));

%Window Selection parameters
fixWindowFlag=get(handles.fixWindowCheckbox,'Value');
s=set(s,'Windowed',fixWindowFlag);

tmp=str2double(get(handles.onsetEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp))
    warndlg(['Invalid window selection parameter. ' ...
            'Not a valid number of samples for window onset.'],...
            'Experiment Space Construction');
else
    s=set(s,'WS_Onset',tmp);    
end
tmp=str2double(get(handles.durationEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid window selection parameter. ' ...
            'Not a valid number of samples for window duration.'],...
            'Experiment Space Construction');
else
    s=set(s,'WS_Duration',tmp);    
end

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
myRedraw(f);
end


end

%% AUXILIAR FUNCTIONS
function myRedraw(hObject)
%So that the GUI keeps it information up to date, easily
% hObject - Handle of the object, e.g., the GUI component,
handles=guidata(hObject);

s=handles.currentElement.data;
if (get(handles.currentElement.data,'RunStatus'))
    set(handles.runStatusText,...
        'String',['COMPUTED (' ...
        num2str(get(handles.currentElement.data,'NumPoints')) ')']);
    set(handles.generateDBButton,'Enable','on');
else
    set(handles.runStatusText,'String','NOT COMPUTED');
    set(handles.generateDBButton,'Enable','off');
end
set(handles.baselineLengthEditBox,'String',get(s,'BaselineSamples'));

set(handles.averageCheckbox,'Value',get(s,'Averaged'));
set(handles.resampleCheckbox,'Value',get(s,'Resampled'));
set(handles.baselineEditBox,'String',get(s,'RS_Baseline'));
set(handles.taskEditBox,'String',get(s,'RS_Task'));
set(handles.restEditBox,'String',get(s,'RS_Rest'));
set(handles.fixWindowCheckbox,'Value',get(s,'Windowed'));
set(handles.onsetEditBox,'String',get(s,'WS_Onset'));
set(handles.durationEditBox,'String',get(s,'WS_Duration'));


if get(s,'Resampled')
    set(handles.baselineEditBox,'Enable','on');
    set(handles.taskEditBox,'Enable','on');
    set(handles.restEditBox,'Enable','on');
else
    set(handles.baselineEditBox,'Enable','off');
    set(handles.taskEditBox,'Enable','off');
    set(handles.restEditBox,'Enable','off');
end
if get(s,'Windowed')
    set(handles.onsetEditBox,'Enable','on');
    set(handles.durationEditBox,'Enable','on');
else
    set(handles.onsetEditBox,'Enable','off');
    set(handles.durationEditBox,'Enable','off');
end

end
