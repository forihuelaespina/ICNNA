function element=guiVisualizeAnalysis(element)
%guiVisualizeAnalysis GUI for visualizing the analysis
%
% a=guiVisualizeAnalysis(a) Visualize analysis a.
%
% The analysis must have been run i.e. 'RunStatus' equals true.
%
%
% Copyright 2008
% @date: 28-Jul-2008
% @author Felipe Orihuela-Espina
%
% See also guiAnalysis, analysis, cluster
%

if ~get(element,'RunStatus')
    errordlg({'ICNA:guiVisualizationAnalysis:AnalysisNotRun',...
        'Analysis must be run before it can be visualized.'})
    return
end
if ((get(element,'ProjectionDimensionality')<2)...
     || (get(element,'ProjectionDimensionality')>3))
    errordlg({'ICNA:guiVisualizationAnalysis:InvalidProjectionDimensionality',...
        ['Visualization is only avaiable for projections '...
        'in 2D or 3D.']});
    return
end


%% Initialize the figure
%...and hide the GUI as it is being constructed
scrsz = get(0,'ScreenSize');
bottom = 10*round(scrsz(4)/100);
left = 5*round(scrsz(3)/100);
width=90*round(scrsz(3)/100);
height=80*round(scrsz(4)/100);
f=figure('Visible','off','Position',[bottom,left,width,height]);
set(f,'NumberTitle','off');
%set(f,'MenuBar','none'); %Hide MATLAB figure menu
%set(f,'CloseRequestFcn',{@OnQuit_Callback});
movegui(f,'center');

fontSize=16;
bgColor=get(f,'Color');


%% Add components
%Menus
%Toolbars
%Components
controlPanel=uipanel(f,'Title','',...
        'BorderType','none',...
		'FontSize',fontSize-2,...
        'BackgroundColor',bgColor,...
        'Position',[0.01 0.01 0.22 0.98]);

limsPanel=uipanel(controlPanel,'Title','Main axes limits',...
        'BorderType','etchedin',...
		'FontSize',fontSize-2,...
        'BackgroundColor',bgColor,...
        'Position',[0.01 0.75 0.98 0.24]);
uicontrol(limsPanel,'Style', 'text',...
       'String', 'Min',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.22 0.77 0.38 0.21]);
uicontrol(limsPanel,'Style', 'text',...
       'String', 'Max',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.62 0.77 0.38 0.21]);
uicontrol(limsPanel,'Style', 'text',...
       'String', 'X',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.02 0.52 0.16 0.21]);
uicontrol(limsPanel,'Style', 'edit',...
       'Tag','XMinEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateMainAxisLimits_Callback},...
       'Units','normalize',...
       'Position', [0.2 0.52 0.38 0.21]);
uicontrol(limsPanel,'Style', 'edit',...
       'Tag','XMaxEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateMainAxisLimits_Callback},...
       'Units','normalize',...
       'Position', [0.6 0.52 0.38 0.21]);
uicontrol(limsPanel,'Style', 'text',...
       'String', 'Y',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.02 0.27 0.16 0.21]);
uicontrol(limsPanel,'Style', 'edit',...
       'Tag','YMinEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateMainAxisLimits_Callback},...
       'Units','normalize',...
       'Position', [0.2 0.27 0.38 0.21]);
uicontrol(limsPanel,'Style', 'edit',...
       'Tag','YMaxEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateMainAxisLimits_Callback},...
       'Units','normalize',...
       'Position', [0.6 0.27 0.38 0.21]);
uicontrol(limsPanel,'Style', 'text',...
       'String', 'Z',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.02 0.02 0.16 0.21]);
uicontrol(limsPanel,'Style', 'edit',...
       'Tag','ZMinEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateMainAxisLimits_Callback},...
       'Units','normalize',...
       'Position', [0.2 0.02 0.38 0.21]);
uicontrol(limsPanel,'Style', 'edit',...
       'Tag','ZMaxEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateMainAxisLimits_Callback},...
       'Units','normalize',...
       'Position', [0.6 0.02 0.38 0.21]);

explorationPanel=uipanel(controlPanel,'Title','Exploration',...
        'Tag','explorationPanel',...
        'BorderType','etchedin',...
		'FontSize',fontSize-2,...
        'BackgroundColor',bgColor,...
        'Position',[0.01 0.5 0.98 0.23]);
uicontrol(explorationPanel,'Style', 'checkbox',...
       'Tag','showSubplotsCheckbox',...
       'Min',0,...
       'Max',1,...
       'Value',0,...
       'Enable','off',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@showSubplotsCheckbox_Callback},...
       'Units','normalize',...
       'Position', [0.02 0.61 0.08 0.28]);
   %Activate only if projection dimensionality is 2D
   %since ginput only works in 2D.
uicontrol(explorationPanel,'Style', 'text',...
       'String', 'Show subplots',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.11 0.61 0.8 0.28]);

uicontrol(explorationPanel,'Style', 'pushbutton',...
       'String', 'Set Grid',...
       'Tag','setGridButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','center',...
       'Units','normalize',...
       'Visible','on',...
       'Position', [0.02 0.02 0.96 0.48],...
       'Callback',{@OnSetGrid_Callback});
uicontrol(explorationPanel,'Style', 'pushbutton',...
       'String', 'Clear Grid',...
       'Tag','clearGridButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','center',...
       'Units','normalize',...
       'Visible','off',...
       'Position', [0.02 0.02 0.96 0.48],...
       'Callback',{@OnClearGrid_Callback});
    
    
infoPanel=uipanel(controlPanel,'Title','Information',...
        'Tag','infoPanel',...
        'BorderType','etchedin',...
		'FontSize',fontSize-2,...
        'BackgroundColor',bgColor,...
        'Position',[0.01 0.05 0.98 0.23]);
uicontrol(infoPanel,'Style', 'text',...
       'String', 'Subject: ',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.05 0.8 0.6 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'Tag','infoSubjectText',...
       'String', '#',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.65 0.8 0.25 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'String', 'Session: ',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.05 0.6 0.6 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'Tag','infoSessionText',...
       'String', '#',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.65 0.6 0.25 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'String', 'Stimulus: ',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.05 0.4 0.6 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'Tag','infoStimulusText',...
       'String', '#',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.65 0.4 0.25 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'String', 'Block: ',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.05 0.2 0.6 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'Tag','infoBlockText',...
       'String', '#',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.65 0.2 0.25 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'String', 'Channel Group: ',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.05 0.01 0.6 0.18]);
uicontrol(infoPanel,'Style', 'text',...
       'Tag','infoChannelGroupText',...
       'String', '#',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.65 0.01 0.25 0.18]);


axesPanel=uipanel(f,'Title','',...
        'BorderType','none',...
		'FontSize',fontSize-2,...
        'BackgroundColor',bgColor,...
        'Position',[0.25 0.01 0.74 0.98]);
mainAxes=axes('Parent',axesPanel);
set(mainAxes,...
        'Tag','mainAxes',...
		'FontSize',fontSize-2,...
        'Color','w',...
        'Units','normalize',...
        'Position',[0.1 0.1 0.85 0.85]);
grid(mainAxes,'on');
xlabel(mainAxes,'Component 1');
ylabel(mainAxes,'Component 2');
title(mainAxes,'Embedding');
if (get(element,'ProjectionDimensionality')==3)
    zlabel(mainAxes,'Component 3');
    view(3);
end

subplotsPositions=[0.07 0.1 0.15 0.15;...
                   0.32 0.1 0.15 0.15;...
                   0.57 0.1 0.15 0.15;...
                   0.82 0.1 0.15 0.15];
for ii=1:4
    subAxes(ii)=axes('Parent',axesPanel);
    set(subAxes(ii),...
        'Tag',['subplotAxes' num2str(ii)],...
        'FontSize',fontSize-6,...
        'Color','w',...
        'Visible','off',...
        'Units','normalize',...
        'Position',subplotsPositions(ii,:));
    grid(subAxes(ii),'on');
    xlabel(subAxes(ii),'Features');
    ylabel(subAxes(ii),'Feature Value (A.U.)');
end


%% On Opening
handles = guihandles(f); %NOTE that only include those whose 'Tag' are not empty
handles.currentElement.data=element;

handles.subplotsAxesHandles=subAxes;

handles.gridStatus=false; %True if grid is set. False otherwise
handles.grid=[]; %The grid itself

guidata(f,handles);
OnLoad(f);


%% Make GUI visible
set(f,'Name','ICNA - MENA Analysis');
set(f,'Visible','on');
waitfor(f);

%%===================================================
%%CALLBACKS
%%===================================================



%% exploreIndividualPoints
%Exploration of individual points
%Exploration finishes when the user clicks
%with the mouse right button
function exploreIndividualPoints(hObject)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
handles=guidata(hObject);

handles.selectedPoints=zeros(0,1);
if (isfield(handles,'selectedPointsHandle'))
    delete(handles.selectedPointsHandle);
    handles = rmfield(handles, 'selectedPointsHandle');
end

subplotsLoop=handles.subplotsAxesHandles;
currentSubplotIndex=0;

Y=get(handles.currentElement.data,'ProjectionSpace');
H=get(handles.currentElement.data,'FeatureSpace');
I=get(handles.currentElement.data,'PatternIndexes');

mouseButton=1;
while(mouseButton==1 && ~handles.gridStatus)
    axes(handles.mainAxes); %Ensure the focus is on the main axes
    %Let the user Pick one point
    [xpt,ypt,mouseButton]=ginput(1);
    %Look for the selected point (or the nearest point) if not too far...
    %%%Calculate euclidean distances between the selected coordinates and
    %%%the cloud of points
    D=[Y(:,1)-xpt Y(:,2)-ypt];%Distance from clicked point to all data points
    E=sqrt(D(:,1).^2+D(:,2).^2);
    if(min(E)<20 && mouseButton==1) %%So the click is not too far away...
        pointIdx=find(E==min(E)); %Choose the nearest point to the click
        handles.selectedPoints=...
            sort(unique([handles.selectedPoints pointIdx]));
        hold on,
        %Highlight the selected point
        if (~isfield(handles,'selectedPointsHandle'))
            handles.selectedPointsHandle=...
                line(Y(handles.selectedPoints,1),Y(handles.selectedPoints,2),...
                    'Marker','o','Color','m',...
                    'LineStyle','none',...
                    'LineWidth',1.5,'MarkerSize',12);
                    
        else
            set(handles.selectedPointsHandle,'XData',...
                Y(handles.selectedPoints,1));
            set(handles.selectedPointsHandle,'YData',...
                Y(handles.selectedPoints,2));
            drawnow
        end
        hold off
        
        %plot the feature vector in the subplots
        axes(subplotsLoop(1+mod(currentSubplotIndex,length(subplotsLoop))));
        plot(H(pointIdx,:),'k-','LineWidth',1.5);
        grid on, box on
        currentSubplotIndex=currentSubplotIndex+1;
        
        
        %and update the info panel (see class analysis)
        set(handles.infoSubjectText,'String',...
                num2str(I(pointIdx,1)));
        set(handles.infoSessionText,'String',...
                num2str(I(pointIdx,2)));
        set(handles.infoStimulusText,'String',...
                num2str(I(pointIdx,3)));
        set(handles.infoBlockText,'String',...
                num2str(I(pointIdx,4)));
        set(handles.infoChannelGroupText,'String',...
                num2str(I(pointIdx,5)));
        
    end
end
guidata(f,handles);
end


%% exploreRegionalBehaviour
%ExploreRegionalBehaviour with a grid on
%Exploration finishes when the user clicks
%with the mouse right button
function exploreRegionalBehaviour(hObject)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
handles=guidata(hObject);

subplotsLoop=handles.subplotsAxesHandles;
currentSubplotIndex=0;

Y=get(handles.currentElement.data,'ProjectionSpace');
H=get(handles.currentElement.data,'FeatureSpace');
CIdx=inWhichCells(handles.grid,Y);
    
mouseButton=1;
while(mouseButton==1 && handles.gridStatus)
    axes(handles.mainAxes); %Ensure the focus is on the main axes
    %Let the user Pick one point
    [xpt,ypt,mouseButton]=ginput(1);
    %Look for the selected grid cell if not outside the grid...
    cellIdx=inWhichCells(handles.grid,[xpt ypt]);
    if(cellIdx~=0)
        %Add the cell to the highligthed cells
        highlightCells=get(handles.grid,'HighlightCells');
        highlightCells=sort(unique([highlightCells cellIdx]));
        handles.grid=set(handles.grid,'HighlightCells',highlightCells);
        guidata(f,handles);
        axes(handles.gridHandles.axes)
        if isfield(handles.gridHandles,'frame')
            delete(handles.gridHandles.frame);
        end
        if isfield(handles.gridHandles,'vertex')
            delete(handles.gridHandles.vertex);
        end
        if isfield(handles.gridHandles,'cellLabels')
            delete(handles.gridHandles.cellLabels(:));
        end
        if isfield(handles.gridHandles,'highlightCellsFace')
            delete(handles.gridHandles.highlightCellsFace(:));
        end
        if isfield(handles.gridHandles,'highlightCellsFrame')
            delete(handles.gridHandles.highlightCellsFrame(:));
        end
        handles.gridHandles=plot(handles.grid);
        guidata(f,handles);
        
        %Find the points in the cell and compute average behaviour
        pointsIdx=find(CIdx==cellIdx);
        if length(pointsIdx)>1
            avgVector=mean(H(pointsIdx,:));
        else
            avgVector=H(pointsIdx,:);
        end
        %And plot the cell average feature vector in the subplots
        axes(subplotsLoop(1+mod(currentSubplotIndex,length(subplotsLoop))));
        plot(avgVector,'k-','LineWidth',1.5);
        grid on, box on
        currentSubplotIndex=currentSubplotIndex+1;
        
    end
end

end





%% OnClear
%Clears the gui (possibly after closing the currentElement)
%See also OnLoad
function OnClear(hObject)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
handles=guidata(hObject);

set(handles.showSubplotsCheckbox,'Enable','off')
cla(handles.mainAxes);

set(handles.XMinEditBox,'String','');
set(handles.XMinEditBox,'Enable','off');
set(handles.XMaxEditBox,'String','');
set(handles.XMaxEditBox,'Enable','off');
set(handles.YMinEditBox,'String','');
set(handles.YMinEditBox,'Enable','off');
set(handles.YMaxEditBox,'String','');
set(handles.YMaxEditBox,'Enable','off');
set(handles.ZMinEditBox,'String','');
set(handles.ZMinEditBox,'Enable','off');
set(handles.ZMaxEditBox,'String','');
set(handles.ZMaxEditBox,'Enable','off');

guidata(f,handles);
end

%% OnClearGrid
%Clears the grid for regional exploration
function OnClearGrid_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
handles=guidata(hObject);
set(handles.clearGridButton,'Visible','off');
set(handles.setGridButton,'Visible','on');

axes(handles.gridHandles.axes)
if isfield(handles.gridHandles,'frame')
    delete(handles.gridHandles.frame);
end
if isfield(handles.gridHandles,'vertex')
    delete(handles.gridHandles.vertex);
end
if isfield(handles.gridHandles,'cellLabels')
    delete(handles.gridHandles.cellLabels(:));
end
if isfield(handles.gridHandles,'highlightCellsFace')
    delete(handles.gridHandles.highlightCellsFace(:));
end
if isfield(handles.gridHandles,'highlightCellsFrame')
    delete(handles.gridHandles.highlightCellsFrame(:));
end

handles.gridStatus=false; %True if grid is set. False otherwise
%Note that I do not clear the grid object!!
guidata(hObject,handles);
end



%% OnLoad 
%Refresh the whole GUI when loading a new Element.
%See also OnClear
function OnLoad(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO

handles=guidata(hObject);

pDim=get(element,'ProjectionDimensionality');
Y=get(element,'ProjectionSpace');
%Plot the clusters
axes(handles.mainAxes)
clustersIds=getClusterList(element);
for ii=clustersIds
    c=getCluster(element,ii);
    h=[];
    if get(c,'Visible')
        switch (pDim)
            case 2
                h(ii,:)=plotCluster2D(Y,c);
            case 3
                h(ii,:)=plotCluster3D(Y,c);
            otherwise
                errordlg({'ICNA:guiVisualizationAnalysis:InvalidProjectionDimensionality',...
                    ['Visualization is only avaiable for projections '...
                    'in 2D or 3D.']});
                return
        end
    end
    handles.clustersHandles=h;
    clear h
end

set(handles.XMinEditBox,'Enable','on')
set(handles.XMaxEditBox,'Enable','on')
set(handles.YMinEditBox,'Enable','on')
set(handles.YMaxEditBox,'Enable','on')
if (pDim==2)
    %Enable subplots
    set(handles.showSubplotsCheckbox,'Enable','on')
else
    %Disable subplots as ginput only works in 2D
    set(handles.showSubplotsCheckbox,'Enable','off')
end

if (pDim==3)
    %Enable Z axis lims but disable Exploration tools
    set(handles.ZMinEditBox,'Enable','on')
    set(handles.ZMaxEditBox,'Enable','on')
    set(handles.explorationPanel,'Visible','off');
else
    %Disable Z axis lims but enable Exploration tools
    set(handles.ZMinEditBox,'Enable','off')
    set(handles.ZMaxEditBox,'Enable','off')
    
    set(handles.explorationPanel,'Visible','on');
end

xlim=get(handles.mainAxes,'XLim');
set(handles.XMinEditBox,'String',xlim(1));
set(handles.XMaxEditBox,'String',xlim(2));
ylim=get(handles.mainAxes,'YLim');
set(handles.YMinEditBox,'String',ylim(1));
set(handles.YMaxEditBox,'String',ylim(2));
if (pDim==3)
    zlim=get(handles.mainAxes,'ZLim');
    set(handles.ZMinEditBox,'String',zlim(1));
    set(handles.ZMaxEditBox,'String',zlim(2));
end

guidata(f,handles);
end



%% showSubplotsCheckbox callback
%showSubplotsCheckbox clicked callback
function showSubplotsCheckbox_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);
if (get(handles.showSubplotsCheckbox,'Value'))
    %ExplorationMode
    set(handles.mainAxes,'Position',[0.1 0.35 0.85 0.55])
    nSubplots=length(handles.subplotsAxesHandles);
    for ii=1:nSubplots
        set(handles.subplotsAxesHandles(ii),'Visible','on')
    end
    
    
    if (handles.gridStatus)
        %Explore average cell behaviour
        exploreRegionalBehaviour(hObject);
    else
        %Explore individual points
        exploreIndividualPoints(hObject);
    end
        
    
    
else
    set(handles.mainAxes,'Position',[0.1 0.1 0.85 0.85])
    nSubplots=length(handles.subplotsAxesHandles);
    for ii=1:nSubplots
        set(handles.subplotsAxesHandles(ii),'Visible','off')
    end
        
end
guidata(hObject,handles);
end

%% OnSetGrid
%Set a grid for regional exploration
function OnSetGrid_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
handles=guidata(hObject);
if isempty(handles.grid)
    %Get a new grid
    tmpGrid=guiMenaGrid;
else
    tmpGrid=guiMenaGrid(handles.grid);
end

if isempty(tmpGrid)
    %Do nothing
    handles.gridStatus=false;
else
    %Refresh the grid
    handles.grid=tmpGrid;
    handles.gridStatus=true; %True if grid is set. False otherwise

    set(handles.setGridButton,'Visible','off');
    set(handles.clearGridButton,'Visible','on');
    guidata(hObject,handles);
    %Paint the grid
    tmp=plot(handles.grid);
    if (length(tmp)==1)
        handles.gridHandles=tmp;
    else
        handles.gridHandles=tmp{1};
    end
    guidata(hObject,handles);
    
end
end


%% OnUpdateMainAxisLimits callback
%OnUpdateMainAxisLimits callback
function OnUpdateMainAxisLimits_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);
pDim=get(element,'ProjectionDimensionality');

lims=[str2double(get(handles.XMinEditBox,'String')) ...
      str2double(get(handles.XMaxEditBox,'String'))];
if any(isnan(lims))
    warndlg('X main axes invalid limits','guiVisualizeAnalysis');
else
  set(handles.mainAxes,'XLim',lims);
end
lims=[str2double(get(handles.YMinEditBox,'String')) ...
      str2double(get(handles.YMaxEditBox,'String'))];
if any(isnan(lims))
    warndlg('Y main axes invalid limits','guiVisualizeAnalysis');
else
  set(handles.mainAxes,'YLim',lims);
end
if (pDim==3)
    lims=[str2double(get(handles.ZMinEditBox,'String')) ...
          str2double(get(handles.ZMaxEditBox,'String'))];
    if any(isnan(lims))
        warndlg('Z main axes invalid limits','guiVisualizeAnalysis');
    else
        set(handles.mainAxes,'ZLim',lims);
    end
end

guidata(hObject,handles);
end

end
