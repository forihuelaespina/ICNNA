function element=guiExperimentSpace(varargin)
%guiExperimentSpace GUI for computing an experimentSpace
%
% a=guiExperimentSpace(a) displays a graphical user interface (GUI) for
%   modifying parameters and running an experimentSpace
%   the experimentSpace a. The function returns the updated
%   experimentSpace, or the unchanged experimentSpace if the action
%   is cancelled or the window closed without saving.
%
% a=guiExperimentSpace(...,'InputFilename',filename) where filename
%   holds the name of the file which stores the experiment dataset.
%
% a=guiExperimentSpace(...,'OutputFilename',filename) where filename
%   holds the name of the file onto which storing the experimentSpace.
%
% Copyright 2008-13
% @date: 3-Jul-2008
% @author Felipe Orihuela-Espina
% @modified: 10-Feb-2012
%
% See also guiExperiment, guiExperimentSpace, wizExperimentSpace
%

element=varargin{1};
varargin(1)=[];
inputFilename='';
outputFilename='';
while (~isempty(varargin))
    prop=varargin{1};
    val=varargin{2};
    varargin(1:2)=[];
    switch prop
        case 'InputFilename'
            inputFilename=val;
        case 'OutputFilename'
            outputFilename=val;
        otherwise
            error('Property not recognised');
    end
end



%% Initialize the figure
%...and hide the GUI as it is being constructed
width=700;
height=720;
f=figure('Visible','off','Position',[100,500,width,height]);
set(f,'NumberTitle','off');
set(f,'MenuBar','none'); %Hide MATLAB figure menu
set(f,'CloseRequestFcn',{@OnQuit_Callback});
movegui(f,'center');

%% Add components
fontSize=14;
bgColor=get(f,'Color');


uicontrol(f,'Style', 'text',...
       'String', 'Name:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.92 0.25 0.06]);
uicontrol(f,'Style', 'text',...
       'Tag','elementNameText',...
       'String', 'NONAME',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.28 0.92 0.5 0.06]);

uicontrol(f,'Style', 'text',...
       'String', 'Status:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.85 0.25 0.06]);
uicontrol(f,'Style', 'text',...
       'Tag','runStatusText',...
       'String', 'NOT COMPUTED',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.28 0.85 0.5 0.06]);   
   
uicontrol(f,'Style', 'text',...
       'String', 'Select Experiment:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.78 0.25 0.06]);
uicontrol(f,'Style', 'edit',...
       'Tag','experimentFilenameEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.28 0.78 0.4 0.06]);
uicontrol(f,'Style', 'pushbutton',...
       'String', 'Browse...',...
       'Tag','experimentBrowseButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.72 0.78 0.2 0.06],...
       'Callback',{@OnExperimentBrowse_Callback});

blockSplittingPanel = uipanel(f,...
       'Tag','blockSplittingPanel',...
       'Title', 'Block Splitting',...
       'BorderType', 'etchedin',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'Units','normalize',...
       'Position', [0.05 0.5 0.42 0.26]); 
   
uicontrol(blockSplittingPanel,'Style', 'text',...
       'String', 'Baseline Length Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.85 0.5 0.12]);
uicontrol(blockSplittingPanel,'Style', 'edit',...
       'Tag','baselineLengthEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','on',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.85 0.32 0.12]);
   
uicontrol(blockSplittingPanel,'Style', 'text',...
       'String', 'Max. Rest Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.55 0.5 0.12]);
uicontrol(blockSplittingPanel,'Style', 'edit',...
       'Tag','restLengthEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','on',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.55 0.32 0.12]);
uicontrol(blockSplittingPanel,'Style', 'text',...
       'String', ['If maximum rest samples is negative, ' ...
                  'all samples until next event onset will ' ...
                  'be collected.'],...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.04 0.1 0.9 0.34]);
   
wsPanel = uipanel(f,...
       'Tag','windowSelectionPanel',...
       'Title', 'Window Selection',...
       'BorderType', 'etchedin',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'Units','normalize',...
       'Position', [0.55 0.5 0.42 0.26]); 
   
uicontrol(wsPanel,'Style', 'text',...
       'String', 'Window Onset:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.7 0.5 0.12]);
uicontrol(wsPanel,'Style', 'edit',...
       'Tag','onsetEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','on',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.7 0.35 0.12]);
uicontrol(wsPanel,'Style', 'text',...
       'String', 'Duration:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.4 0.5 0.12]);
uicontrol(wsPanel,'Style', 'edit',...
       'Tag','durationEditBox',...
       'String', '20',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','on',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.4 0.35 0.12]);
uicontrol(wsPanel,'Style', 'text',...
       'String', 'Break delay (from onset):',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.12 0.5 0.24]);
uicontrol(wsPanel,'Style', 'edit',...
       'Tag','breakDelayEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','on',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.12 0.35 0.12]);
   
   
   
paramTabPanel=uitabgroup(f,'Position', [0.05 0.2 0.9 0.28]);    
    
resamplingTab = uitab(paramTabPanel,'Title','Resampling');
uicontrol(resamplingTab,'Style', 'text',...
       'String', 'Perform resampling:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.75 0.5 0.12]);
uicontrol(resamplingTab,'Style', 'checkbox',...
       'Tag','resampleCheckbox',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.55 0.75 0.32 0.12],...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback});
uicontrol(resamplingTab,'Style', 'text',...
       'String', 'Baseline Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.5 0.5 0.12]);
uicontrol(resamplingTab,'Style', 'edit',...
       'Tag','baselineEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.5 0.32 0.12]);
uicontrol(resamplingTab,'Style', 'text',...
       'String', 'Task Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.25 0.5 0.12]);
uicontrol(resamplingTab,'Style', 'edit',...
       'Tag','taskEditBox',...
       'String', '20',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.25 0.32 0.12]);
uicontrol(resamplingTab,'Style', 'text',...
       'String', 'Rest Samples:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.02 0.5 0.12]);
uicontrol(resamplingTab,'Style', 'edit',...
       'Tag','restEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback},...
       'Units','normalize',...
       'Position', [0.55 0.02 0.32 0.12]);

   
averagingTab = uitab(paramTabPanel,...
        'Title','Averaging');
uicontrol(averagingTab,'Style', 'text',...
       'String', 'Perform average:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.7 0.5 0.12]);
uicontrol(averagingTab,'Style', 'checkbox',...
       'Tag','averageCheckbox',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.55 0.7 0.35 0.12],...
       'Callback',{@OnUpdateExperimentSpaceParameters_Callback});

   
normalizationTab = uitab(paramTabPanel,...
        'Title','Normalization');
uicontrol(normalizationTab,'Style', 'text',...
       'String', 'Perform normalization:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.84 0.5 0.12]);
uicontrol(normalizationTab,'Style', 'checkbox',...
       'Tag','normalizationCheckbox',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.55 0.84 0.32 0.12],...
       'Callback',{@OnUpdateNormalizationParameters_Callback});

normScopePanel = uipanel(normalizationTab,...
       'Tag','normalizationScopePanel',...
       'Title', 'Scope',...
       'BorderType', 'etchedin',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.02 0.02 0.29 0.78]); 
uicontrol(normScopePanel,'Style', 'text',...
       'String', 'Block Individual:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.7 0.5 0.15]);
uicontrol(normScopePanel,'Style', 'radiobutton',...
       'Tag','N_Sc_BlockIndividual_Rbutton',...
       'Min', 0,...
       'Max', 1,...
       'Value', 0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.55 0.7 0.32 0.15],...
       'Callback',{@OnN_Sc_BlockIndividual_RButton_Callback});
uicontrol(normScopePanel,'Style', 'text',...
       'String', 'Individual:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.4 0.5 0.15]);
uicontrol(normScopePanel,'Style', 'radiobutton',...
       'Tag','N_Sc_Individual_Rbutton',...
       'Min', 0,...
       'Max', 1,...
       'Value', 0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.55 0.4 0.32 0.15],...
       'Callback',{@OnN_Sc_Individual_RButton_Callback});
uicontrol(normScopePanel,'Style', 'text',...
       'String', 'Collective:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.1 0.5 0.15]);
uicontrol(normScopePanel,'Style', 'radiobutton',...
       'Tag','N_Sc_Collective_Rbutton',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.55 0.1 0.32 0.15],...
       'Callback',{@OnN_Sc_Collective_RButton_Callback});

normDimensionPanel = uipanel(normalizationTab,...
       'Tag','normalizationDimensionPanel',...
       'Title', 'Dimension',...
       'BorderType', 'etchedin',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.33 0.02 0.29 0.78]); 
uicontrol(normDimensionPanel,'Style', 'text',...
       'String', 'By Channel:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.7 0.5 0.15]);
uicontrol(normDimensionPanel,'Style', 'radiobutton',...
       'Tag','N_Dim_Channel_Rbutton',...
       'Min', 0,...
       'Max', 1,...
       'Value', 0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.55 0.7 0.32 0.15],...
       'Callback',{@OnN_Dim_Channel_RButton_Callback});
uicontrol(normDimensionPanel,'Style', 'text',...
       'String', 'By Signal:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.4 0.5 0.15]);
uicontrol(normDimensionPanel,'Style', 'radiobutton',...
       'Tag','N_Dim_Signal_Rbutton',...
       'Min', 0,...
       'Max', 1,...
       'Value', 0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.55 0.4 0.32 0.15],...
       'Callback',{@OnN_Dim_Signal_RButton_Callback});
uicontrol(normDimensionPanel,'Style', 'text',...
       'String', 'Combined:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.1 0.5 0.15]);
uicontrol(normDimensionPanel,'Style', 'radiobutton',...
       'Tag','N_Dim_Combined_Rbutton',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.55 0.1 0.32 0.15],...
       'Callback',{@OnN_Dim_Combined_RButton_Callback});

normMethodPanel = uipanel(normalizationTab,...
       'Tag','normalizationMethodPanel',...
       'Title', 'Method',...
       'BorderType', 'etchedin',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.63 0.02 0.34 0.78]); 
uicontrol(normMethodPanel,'Style', 'text',...
       'String', 'Normalized Mean and Variance:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.8 0.5 0.15]);
uicontrol(normMethodPanel,'Style', 'radiobutton',...
       'Tag','N_Method_Normal_Rbutton',...
       'Min', 0,...
       'Max', 1,...
       'Value', 1,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.55 0.8 0.32 0.15],...
       'Callback',{@OnN_Method_Normal_RButton_Callback});
uicontrol(normMethodPanel,'Style', 'text',...
       'String', 'Mean:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.02 0.52 0.2 0.2]);
uicontrol(normMethodPanel,'Style', 'edit',...
       'Tag','meanEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','off',...
       'Callback',{@OnUpdateNormalizationParameters_Callback},...
       'Units','normalize',...
       'Position', [0.23 0.52 0.26 0.2]);
uicontrol(normMethodPanel,'Style', 'text',...
       'String', 'Var.:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.52 0.52 0.2 0.2]);
uicontrol(normMethodPanel,'Style', 'edit',...
       'Tag','varianceEditBox',...
       'String', '1',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','off',...
       'Callback',{@OnUpdateNormalizationParameters_Callback},...
       'Units','normalize',...
       'Position', [0.73 0.52 0.26 0.2]);

uicontrol(normMethodPanel,'Style', 'text',...
       'String', 'Range:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.04 0.3 0.5 0.15]);
uicontrol(normMethodPanel,'Style', 'radiobutton',...
       'Tag','N_Method_Range_Rbutton',...
       'Min', 0,...
       'Max', 1,...
       'Value', 0,...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-4,...
       'Units','normalize',...
       'Position', [0.55 0.3 0.32 0.15],...
       'Callback',{@OnN_Method_Range_RButton_Callback});
uicontrol(normMethodPanel,'Style', 'text',...
       'String', 'Min:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.02 0.02 0.2 0.2]);
uicontrol(normMethodPanel,'Style', 'edit',...
       'Tag','minEditBox',...
       'String', '0',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','off',...
       'Callback',{@OnUpdateNormalizationParameters_Callback},...
       'Units','normalize',...
       'Position', [0.23 0.02 0.26 0.2]);
uicontrol(normMethodPanel,'Style', 'text',...
       'String', 'Max:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.52 0.02 0.2 0.2]);
uicontrol(normMethodPanel,'Style', 'edit',...
       'Tag','maxEditBox',...
       'String', '1',...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','off',...
       'Callback',{@OnUpdateNormalizationParameters_Callback},...
       'Units','normalize',...
       'Position', [0.73 0.02 0.26 0.2]);


   
normalizationTab = uitab(paramTabPanel,...
        'Title','Options');   
uicontrol(normalizationTab,'Style', 'text',...
       'String', 'Save to File:',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.01 0.61 0.3 0.25]);
uicontrol(normalizationTab,'Style', 'edit',...
       'Tag','experimentSpaceFilenameEditBox',...
       'BackgroundColor','w',...
       'FontSize',fontSize,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.35 0.61 0.4 0.25]);
uicontrol(normalizationTab,'Style', 'pushbutton',...
       'String', 'Browse...',...
       'Tag','experimentSpaceBrowseButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.76 0.61 0.2 0.25],...
       'Callback',{@OnExperimentSpaceBrowse_Callback});
   
   

statsPanel = uipanel(f,...
       'Tag','statsPanel',...
       'Title', 'Statistical Analysis',...
       'BorderType', 'etchedin',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'Units','normalize',...
       'Position', [0.05 0.02 0.5 0.18]); 
uicontrol(statsPanel,'Style', 'pushbutton',...
       'String', 'Generate Database',...
       'Tag','generateDBButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','center',...
       'Units','normalize',...
       'Enable','off',...
       'Position', [0.05 0.65 0.8 0.3],...
       'Callback',{@OnGenerateDatabase_Callback});
uicontrol(statsPanel,'Style', 'text',...
       'String', 'Generate Activity Matrix',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Units','normalize',...
       'Position', [0.16 0.3 0.6 0.3]);
uicontrol(statsPanel,'Style', 'checkbox',...
       'Tag','activityMatrixCheckBox',...
       'Value', 1,...
       'BackgroundColor','w',...
       'FontSize',fontSize-2,...
       'HorizontalAlignment','left',...
       'Enable','off',...
       'Units','normalize',...
       'Position', [0.05 0.3 0.1 0.3]);


uicontrol(f,'Style', 'pushbutton',...
       'String', 'Compute',...
       'Tag','runButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','center',...
       'Units','normalize',...
       'Position', [0.57 0.07 0.2 0.06],...
       'Callback',{@OnComputing_Callback});

uicontrol(f,'Style', 'pushbutton',...
       'String', 'Close',...
       'Tag','closeButton',...
       'BackgroundColor',bgColor,...
       'FontSize',fontSize,...
       'HorizontalAlignment','right',...
       'Units','normalize',...
       'Position', [0.78 0.07 0.18 0.06],...
       'Callback',{@OnQuit_Callback});
   

%% On Opening
handles = guihandles(f); %NOTE that only include those whose 'Tag' are not empty

set(handles.experimentFilenameEditBox,'String',inputFilename);
set(handles.experimentSpaceFilenameEditBox,'String',outputFilename);

handles.currentElement.data=experimentSpace(element);
handles.currentElement.saved=get(element,'RunStatus');
guidata(f,handles);
OnLoad(f);

 
%% Make GUI visible
set(f,'Name','ICNA - Compute Experiment Space');
set(f,'Visible','on');
waitfor(f);



%% OnClose callback
%On Closing this window. Check whether data needs saving
function OnClose_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);
closeWindow=true;
if (~get(handles.currentElement.data,'RunStatus'))
    element=[];
    %Offer the possibility of saving
    button = questdlg(['Experiment Space has not been computed ' ...
        'with current parameters. ' ...
        'Would you like to compute it now?'],'Experiment Space',...
        'Compute','Close','Close');
    switch (button)
        case 'Compute'
            OnComputing_Callback(hObject,eventData);
            closeWindow=true;
        case 'Close'
            closeWindow=true;
    end
end
 
if (closeWindow)
    handles.currentElement.data=[]; 
    handles.currentElement.saved=true;
    
    guidata(hObject,handles);
end
myRedraw(hObject);
end

%% OnExperimentBrowse callback
%Browse for the file of the experiment dataset
function OnExperimentBrowse_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

[FileName,PathName] = uigetfile('*.mat','WindowStyle');
if isequal(FileName,0)
    %disp('Operation ''Open experiment'' cancelled')
else
    %Do not open the file yet. Just store the name.
    handles=guidata(hObject);
    set(handles.experimentFilenameEditBox, ...
            'String',[PathName FileName]);
    guidata(hObject,handles);
end
end

%% OnExperimentSpaceBrowse callback
%Browse for the file to save the experimentSpace
function OnExperimentSpaceBrowse_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
%Construct a default name 
name=get(handles.currentElement.data,'Name');
defName=[name '_' datestr(now,29) '.mat'];
[FileName,PathName] = uiputfile('*.mat','WindowStyle',defName);
if isequal(FileName,0)
    %disp('Operation ''Open experiment'' cancelled')
else
    set(handles.experimentSpaceFilenameEditBox,...
        'String',[PathName FileName]);
    guidata(hObject,handles);
end
end

%% OnGenerateDatabase callback
%Generates a database
function OnGenerateDatabase_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

expSpace=handles.currentElement.data;
if get(expSpace,'RunStatus')

    directory_name = uigetdir('','Select destination folder');
    if directory_name~=0
        directory_name(find(directory_name=='\'))='/';
        directory_name=[directory_name '/'];

        options.outputFilename=[directory_name ...
            get(expSpace,'Name') '_DB.csv'];
        options.helpFilename=[directory_name ...
            get(expSpace,'Name') '_DB_Help.txt'];
        try
            %[db]=generateDB(expSpace,options); %Now DEPRECATED
            %options.breakSamples = get(expSpace,'WS_BreakDelay'); %Now DEPRECATED
            options.includeHbT = true;
            options.includeHbDiff = true;
            [db]=generateDB_withBreak(expSpace,options);
            
            if get(handles.activityMatrixCheckBox,'Value')
              
                sessNames=get(expSpace,'SessionNames');
                sessNamesStr=cell(1,length(sessNames));
                for ss=1:length(sessNames)
                    sessNamesStr(ss)={sessNames(ss).name};
                end
                
              optionsAM.save=true;
              optionsAM.destinationFolder=directory_name;
              optionsAM.sessionLabels=sessNamesStr;
              optionsAM.outputFilename=[get(expSpace,'Name')...
                                '_ActivityMatrix_Combined_SignRank'];
              optionsAM.type='combined'; %Default. Just for clarity
              [M,P,S]=getActivityMatrix(db,optionsAM);

              optionsAM.outputFilename=[get(expSpace,'Name')...
                                '_ActivityMatrix_Oxy_SignRank'];
              optionsAM.type='oxy'; 
              [M,P,S]=getActivityMatrix(db,optionsAM);

              optionsAM.outputFilename=[get(expSpace,'Name')...
                                '_ActivityMatrix_Deoxy_SignRank'];
              optionsAM.type='deoxy'; 
              [M,P,S]=getActivityMatrix(db,optionsAM);
            end
            
            clear db
            h=msgbox('Done!','ICNA','modal');
            uiwait(h);
        catch ME
            warndlg([ME.identifier ': ' ME.message ...
                'Unable to generate DB.'],'ICNA');
        end
    end
end

end


%% OnLoad
%Initialize the fields. To be executed when the object is load
function OnLoad(hObject)
%So that the GUI keeps it information up to date, easily
% hObject - Handle of the object, e.g., the GUI component,
handles=guidata(hObject);

s=handles.currentElement.data;

set(handles.elementNameText,'String',get(element,'Name'));

if (get(handles.currentElement.data,'RunStatus'))
    set(handles.runStatusText,...
        'String',['COMPUTED (' ...
        num2str(get(handles.currentElement.data,'NumPoints')) ')']);
    set(handles.generateDBButton,'Enable','on');
    set(handles.activityMatrixCheckBox,'Enable','on');
else
    set(handles.runStatusText,'String','NOT COMPUTED');
    set(handles.generateDBButton,'Enable','off');
    set(handles.activityMatrixCheckBox,'Enable','off');
end
set(handles.baselineLengthEditBox,'String',get(s,'BaselineSamples'));
set(handles.restLengthEditBox,'String',get(s,'RestSamples'));

set(handles.onsetEditBox,'String',get(s,'WS_Onset'));
set(handles.durationEditBox,'String',get(s,'WS_Duration'));
set(handles.breakDelayEditBox,'String',get(s,'WS_BreakDelay'));

set(handles.averageCheckbox,'Value',get(s,'Averaged'));
set(handles.resampleCheckbox,'Value',get(s,'Resampled'));
set(handles.normalizationCheckbox,'Value',get(s,'Normalized'));

set(handles.baselineEditBox,'String',get(s,'RS_Baseline'));
set(handles.taskEditBox,'String',get(s,'RS_Task'));
set(handles.restEditBox,'String',get(s,'RS_Rest'));



%Enable/Disable controls
if get(s,'Resampled')
    set(handles.baselineEditBox,'Enable','on');
    set(handles.taskEditBox,'Enable','on');
    set(handles.restEditBox,'Enable','on');
else
    set(handles.baselineEditBox,'Enable','off');
    set(handles.taskEditBox,'Enable','off');
    set(handles.restEditBox,'Enable','off');
end

if get(s,'Normalized')
    set(handles.N_Sc_BlockIndividual_Rbutton,'Enable','on');
    set(handles.N_Sc_Individual_Rbutton,'Enable','on');
    set(handles.N_Sc_Collective_Rbutton,'Enable','on');

    set(handles.N_Dim_Channel_Rbutton,'Enable','on');
    set(handles.N_Dim_Signal_Rbutton,'Enable','on');
    set(handles.N_Dim_Combined_Rbutton,'Enable','on');

    set(handles.N_Method_Normal_Rbutton,'Enable','on');
    set(handles.N_Method_Range_Rbutton,'Enable','on');

    switch get(s,'NormalizationMethod')
        case 'normal'
            set(handles.meanEditBox,'Enable','on');
            set(handles.varianceEditBox,'Enable','on');
            set(handles.minEditBox,'Enable','off');
            set(handles.maxEditBox,'Enable','off');
        case 'range'
            set(handles.meanEditBox,'Enable','off');
            set(handles.varianceEditBox,'Enable','off');
            set(handles.minEditBox,'Enable','on');
            set(handles.maxEditBox,'Enable','on');
        otherwise
            error('ICNA:guiExperimentSpace:OnLoad',...
                'Unexpected normalization method.');
    end

else
    set(handles.N_Sc_BlockIndividual_Rbutton,'Enable','off');
    set(handles.N_Sc_Individual_Rbutton,'Enable','off');
    set(handles.N_Sc_Collective_Rbutton,'Enable','off');

    set(handles.N_Dim_Channel_Rbutton,'Enable','off');
    set(handles.N_Dim_Signal_Rbutton,'Enable','off');
    set(handles.N_Dim_Combined_Rbutton,'Enable','off');

    set(handles.N_Method_Normal_Rbutton,'Enable','off');
    set(handles.N_Method_Range_Rbutton,'Enable','off');

    set(handles.meanEditBox,'Enable','off');
    set(handles.varianceEditBox,'Enable','off');
    set(handles.minEditBox,'Enable','off');
    set(handles.maxEditBox,'Enable','off');
end


%set(handles.breakDelayEditBox,'Enable','off');
end


%% OnN_Sc_BlockIndividual_RButton Callback
function OnN_Sc_BlockIndividual_RButton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

set(handles.N_Sc_BlockIndividual_Rbutton,'Value',1);
set(handles.N_Sc_Individual_Rbutton,'Value',0);
set(handles.N_Sc_Collective_Rbutton,'Value',0);

s=set(s,'NormalizationScope','blockIndividual');

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
end


%% OnN_Sc_Individual_RButton Callback
function OnN_Sc_Individual_RButton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

set(handles.N_Sc_BlockIndividual_Rbutton,'Value',0);
set(handles.N_Sc_Individual_Rbutton,'Value',1);
set(handles.N_Sc_Collective_Rbutton,'Value',0);

s=set(s,'NormalizationScope','Individual');

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
end

%% OnN_Sc_Collective_RButton Callback
function OnN_Sc_Collective_RButton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

set(handles.N_Sc_BlockIndividual_Rbutton,'Value',0);
set(handles.N_Sc_Individual_Rbutton,'Value',0);
set(handles.N_Sc_Collective_Rbutton,'Value',1);

s=set(s,'NormalizationScope','Collective');

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
end


%% OnN_Dim_Channel_RButton Callback
function OnN_Dim_Channel_RButton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

set(handles.N_Dim_Channel_Rbutton,'Value',1);
set(handles.N_Dim_Signal_Rbutton,'Value',0);
set(handles.N_Dim_Combined_Rbutton,'Value',0);

s=set(s,'NormalizationDimension','Channel');

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
end


%% OnN_Dim_Signal_RButton Callback
function OnN_Dim_Signal_RButton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

set(handles.N_Dim_Channel_Rbutton,'Value',0);
set(handles.N_Dim_Signal_Rbutton,'Value',1);
set(handles.N_Dim_Combined_Rbutton,'Value',0);

s=set(s,'NormalizationDimension','Signal');

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
end


%% OnN_Dim_Combined_RButton Callback
function OnN_Dim_Combined_RButton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

set(handles.N_Dim_Channel_Rbutton,'Value',0);
set(handles.N_Dim_Signal_Rbutton,'Value',0);
set(handles.N_Dim_Combined_Rbutton,'Value',1);

s=set(s,'NormalizationDimension','Combined');

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
end


%% OnN_Method_Normal_RButton Callback
function OnN_Method_Normal_RButton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

set(handles.N_Method_Normal_Rbutton,'Value',1);
set(handles.N_Method_Range_Rbutton,'Value',0);

s=set(s,'NormalizationMethod','Normal');

set(handles.meanEditBox,'Enable','on');
set(handles.varianceEditBox,'Enable','on');
set(handles.minEditBox,'Enable','off');
set(handles.maxEditBox,'Enable','off');


handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
end


%% OnN_Method_Range_RButton Callback
function OnN_Method_Range_RButton_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.

handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

set(handles.N_Method_Normal_Rbutton,'Value',0);
set(handles.N_Method_Range_Rbutton,'Value',1);

s=set(s,'NormalizationMethod','Range');

set(handles.meanEditBox,'Enable','off');
set(handles.varianceEditBox,'Enable','off');
set(handles.minEditBox,'Enable','on');
set(handles.maxEditBox,'Enable','on');

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
end



%% OnQuit callback
%Clear memory and exit the application
function OnQuit_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
OnClose_Callback(hObject,eventData);
delete(get(gcf,'Children'));
delete(gcf);
end


%% OnComputing callback
%Computes the Experiment Space with the current configuration
function OnComputing_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);

%Check the parameters
OnUpdateExperimentSpaceParameters_Callback(hObject,eventData);
OnUpdateNormalizationParameters_Callback(hObject,eventData);

if (isempty(get(handles.experimentFilenameEditBox,'String')))
    warndlg('Invalid experiment dataset filename',...
            'Computing Experiment Space:');
else

    experimentFilename=get(handles.experimentFilenameEditBox,'String');

    %Load experiment.
    h=waitbar(0,'Computing Experiment Space: Loading experiment dataset');
    var=load(experimentFilename);
    names = fieldnames(var);
    found=false;
    for ii=length(var):-1:1
        e=getfield(var,names{ii});
        if (isa(e,'experiment'))
            found=true;
            break;
        end
    end
    if (~found)
        error('An experimental dataset has not been found.');
    end

    waitbar(0.5,h,'Computing Experiment Space: Computing Experiment Space');

    set(handles.closeButton,'Enable','off');
    set(handles.runButton,'Enable','off');
    set(handles.generateDBButton,'Enable','off');
    set(handles.activityMatrixCheckBox,'Enable','off');
    %Call to computeExperimentSpace
    handles.currentElement.data=compute(handles.currentElement.data,e);
    element=handles.currentElement.data;
    
    set(handles.closeButton,'Enable','on');
    set(handles.runButton,'Enable','on');
    set(handles.generateDBButton,'Enable','on');
    set(handles.activityMatrixCheckBox,'Enable','on');
    
    waitbar(0.95,h,'Computing Experiment Space: Clearing memory');
    %Clear the experiment
    clear var e
    waitbar(1,h,'Computing Experiment Space: Done');
    close(h);

    experimentSpaceFilename=...
        get(handles.experimentSpaceFilenameEditBox,'String');
    if (~isempty(experimentSpaceFilename))
        theExperimentSpace=element;
        save(experimentSpaceFilename,'theExperimentSpace');
        handles.currentElement.saved=true;
    end

    guidata(hObject,handles);
    myRedraw(f);
end
end


%% OnUpdateNormalizationParameters callback
%Updates the current normalization with new information
function OnUpdateNormalizationParameters_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);


%Normalization parameters
normalizationFlag=get(handles.normalizationCheckbox,'Value');
s=set(s,'Normalized',normalizationFlag);

if (get(handles.N_Sc_BlockIndividual_Rbutton,'Value')==1)
    s=set(s,'NormalizationScope','BlockIndividual');
elseif (get(handles.N_Sc_Individual_Rbutton,'Value')==1)
    s=set(s,'NormalizationScope','Individual');
elseif (get(handles.N_Sc_Collective_Rbutton,'Value')==1)
    s=set(s,'NormalizationScope','Collective');
else
    error('ICNA:guiExperimentSpace:OnUpdateNormalizationParameters_Callback',...
        'Unexpected normalization scope.');
end


if (get(handles.N_Dim_Channel_Rbutton,'Value')==1)
    s=set(s,'NormalizationDimension','Channel');
elseif (get(handles.N_Dim_Signal_Rbutton,'Value')==1)
    s=set(s,'NormalizationDimension','Signal');
elseif (get(handles.N_Dim_Combined_Rbutton,'Value')==1)
    s=set(s,'NormalizationDimension','Combined');
else
    error('ICNA:guiExperimentSpace:OnUpdateNormalizationParameters_Callback',...
        'Unexpected normalization dimension.');
end


if (get(handles.N_Method_Normal_Rbutton,'Value')==1)
    s=set(s,'NormalizationMethod','Normal');
elseif (get(handles.N_Method_Range_Rbutton,'Value')==1)
    s=set(s,'NormalizationMethod','Range');
else
    error('ICNA:guiExperimentSpace:OnUpdateNormalizationParameters_Callback',...
        'Unexpected normalization method.');
end

tmp=str2double(get(handles.meanEditBox,'String'));
if (~isscalar(tmp))
    warndlg(['Invalid normalization parameter Mean. ' ...
            'Not a valid mean for normalization.'],...
            'Experiment Space Construction');
    set(handles.meanEditBox,'String',get(s,'NormalizationMean'));
else
    s=set(s,'NormalizationMean',tmp);    
end
tmp=str2double(get(handles.varianceEditBox,'String'));
if (~isscalar(tmp) || tmp<0)
    warndlg(['Invalid normalization parameter Variance. ' ...
            'Not a valid variance for normalization.'],...
            'Experiment Space Construction');
    set(handles.varianceEditBox,'String',get(s,'NormalizationVar'));
else
    s=set(s,'NormalizationVar',tmp);    
end
tmp=str2double(get(handles.minEditBox,'String'));
tmpM=str2double(get(handles.maxEditBox,'String'));
minmaxerror=false;
if (~isscalar(tmp) || tmp>tmpM)
    minmaxerror=true;
    set(handles.minEditBox,'String',get(s,'NormalizationMin'));
else
    s=set(s,'NormalizationMin',tmp);    
end
tmp=str2double(get(handles.maxEditBox,'String'));
tmpM=str2double(get(handles.minEditBox,'String'));
if (~isscalar(tmp) || tmp<tmpM)
    minmaxerror=true;
    set(handles.maxEditBox,'String',get(s,'NormalizationMax'));
else
    s=set(s,'NormalizationMax',tmp);    
end

if minmaxerror
    warndlg('Invalid normalization range.',...
            'Experiment Space Construction');
end

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
myRedraw(f);
end

%% OnUpdateExperimentSpaceParameters callback
%Updates the current experimentSpace with new information
function OnUpdateExperimentSpaceParameters_Callback(hObject,eventData)
% hObject - Handle of the object, e.g., the GUI component,
%   for which the callback was triggered.  See GCBO
% eventdata - Reserved for later use.
handles=guidata(hObject);
s=experimentSpace(handles.currentElement.data);

%Block Splitting parameters
tmp=str2double(get(handles.baselineLengthEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<=0)
    warndlg(['Invalid block splitting parameter. ' ...
            'Not a valid number of samples for baseline.'],...
            'Experiment Space Construction');
    set(handles.baselineLengthEditBox,'String',get(s,'BaselineSamples'));
else
    s=set(s,'BaselineSamples',tmp);   
end

tmp=str2double(get(handles.restLengthEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp))
    warndlg(['Invalid block splitting parameter. ' ...
            'Not a valid maximum number of samples for rest.'],...
            'Experiment Space Construction');
    set(handles.restLengthEditBox,'String',get(s,'RestSamples'));
else
    s=set(s,'RestSamples',tmp);   
end

%Window Selection parameters
tmp=str2double(get(handles.onsetEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp))
    warndlg(['Invalid window selection parameter. ' ...
            'Not a valid number of samples for window onset.'],...
            'Experiment Space Construction');
    set(handles.onsetEditBox,'String',get(s,'WS_Onset'));
else
    s=set(s,'WS_Onset',tmp);    
end

tmp=str2double(get(handles.durationEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid window selection parameter. ' ...
            'Not a valid number of samples for window duration.'],...
            'Experiment Space Construction');
    set(handles.durationEditBox,'String',get(s,'WS_Duration'));
else
    s=set(s,'WS_Duration',tmp);    
end

tmp=str2double(get(handles.breakDelayEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid window selection parameter. ' ...
            'Not a valid number of samples for break delay.'],...
            'Experiment Space Construction');
    set(handles.breakDelayEditBox,'String',get(s,'WS_BreakDelay'));
else
    s=set(s,'WS_BreakDelay',tmp);    
end

%Resample parameters
resampleFlag=get(handles.resampleCheckbox,'Value');
s=set(s,'Resampled',resampleFlag);

tmp=str2double(get(handles.baselineEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid resampling parameter. ' ...
            'Not a valid number of samples for baseline.'],...
            'Experiment Space Construction');
    set(handles.baselineEditBox,'String',get(s,'RS_Baseline'));
else
    s=set(s,'RS_Baseline',tmp);   
end
tmp=str2double(get(handles.taskEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid resampling parameter. ' ...
            'Not a valid number of samples for task block.'],...
            'Experiment Space Construction');
    set(handles.taskEditBox,'String',get(s,'RS_Task'));
else
    s=set(s,'RS_Task',tmp);    
end
tmp=str2double(get(handles.restEditBox,'String'));
if (~isscalar(tmp) || ~(floor(tmp)==tmp) || tmp<0)
    warndlg(['Invalid resampling parameter. ' ...
            'Not a valid number of samples for post-task rest.'],...
            'Experiment Space Construction');
    set(handles.restEditBox,'String',get(s,'RS_Rest'));
else
    s=set(s,'RS_Rest',tmp);    
end

%Average parameters
s=set(s,'Averaged',get(handles.averageCheckbox,'Value'));

handles.currentElement.data=s;
handles.currentElement.saved=false;

guidata(hObject,handles);
myRedraw(f);
end


end

%% AUXILIAR FUNCTIONS
function myRedraw(hObject)
%So that the GUI keeps it information up to date, easily
% hObject - Handle of the object, e.g., the GUI component,
handles=guidata(hObject);

s=handles.currentElement.data;
if (get(handles.currentElement.data,'RunStatus'))
    set(handles.runStatusText,...
        'String',['COMPUTED (' ...
        num2str(get(handles.currentElement.data,'nPoints')) ')']);
    set(handles.generateDBButton,'Enable','on');
    set(handles.activityMatrixCheckBox,'Enable','on');
else
    set(handles.runStatusText,'String','NOT COMPUTED');
    set(handles.generateDBButton,'Enable','off');
    set(handles.activityMatrixCheckBox,'Enable','off');
end

if get(s,'Resampled')
    set(handles.baselineEditBox,'Enable','on');
    set(handles.taskEditBox,'Enable','on');
    set(handles.restEditBox,'Enable','on');
else
    set(handles.baselineEditBox,'Enable','off');
    set(handles.taskEditBox,'Enable','off');
    set(handles.restEditBox,'Enable','off');
end

if get(s,'Normalized')
    set(handles.N_Sc_BlockIndividual_Rbutton,'Enable','on');
    set(handles.N_Sc_Individual_Rbutton,'Enable','on');
    set(handles.N_Sc_Collective_Rbutton,'Enable','on');

    set(handles.N_Dim_Channel_Rbutton,'Enable','on');
    set(handles.N_Dim_Signal_Rbutton,'Enable','on');
    set(handles.N_Dim_Combined_Rbutton,'Enable','on');

    set(handles.N_Method_Normal_Rbutton,'Enable','on');
    set(handles.N_Method_Range_Rbutton,'Enable','on');

    switch get(s,'NormalizationMethod')
        case 'normal'
            set(handles.meanEditBox,'Enable','on');
            set(handles.varianceEditBox,'Enable','on');
            set(handles.minEditBox,'Enable','off');
            set(handles.maxEditBox,'Enable','off');
        case 'range'
            set(handles.meanEditBox,'Enable','off');
            set(handles.varianceEditBox,'Enable','off');
            set(handles.minEditBox,'Enable','on');
            set(handles.maxEditBox,'Enable','on');
        otherwise
            error('ICNA:guiExperimentSpace:myRedraw',...
                'Unexpected normalization method.');
    end

else
    set(handles.N_Sc_BlockIndividual_Rbutton,'Enable','off');
    set(handles.N_Sc_Individual_Rbutton,'Enable','off');
    set(handles.N_Sc_Collective_Rbutton,'Enable','off');

    set(handles.N_Dim_Channel_Rbutton,'Enable','off');
    set(handles.N_Dim_Signal_Rbutton,'Enable','off');
    set(handles.N_Dim_Combined_Rbutton,'Enable','off');

    set(handles.N_Method_Normal_Rbutton,'Enable','off');
    set(handles.N_Method_Range_Rbutton,'Enable','off');

    set(handles.meanEditBox,'Enable','off');
    set(handles.varianceEditBox,'Enable','off');
    set(handles.minEditBox,'Enable','off');
    set(handles.maxEditBox,'Enable','off');

end



end


